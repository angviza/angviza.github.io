<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/06/11/redis/redis-script/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/07/09/android/</url>
    <content><![CDATA[<h2 id="Connecting-WIFI-联网"><a href="#Connecting-WIFI-联网" class="headerlink" title="Connecting WIFI(联网)"></a>Connecting WIFI(联网)</h2><p>依然是熟悉的adb命令和服务启动参数</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ adb shell am startservice \</span><br><span class="line">    -n com.google.wifisetup/.WifiSetupService \</span><br><span class="line">    -a WifiSetupService.Connect \</span><br><span class="line">    -e ssid SSID \</span><br><span class="line">    -e passphrase password</span><br></pre></td></tr></tbody></table></figure>

<p>用logcat查看网络状态</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ adb logcat -d | grep Wifi</span><br><span class="line">...</span><br><span class="line">V WifiWatcher: Network state changed to CONNECTED</span><br><span class="line">V WifiWatcher: SSID changed: ...</span><br><span class="line">I WifiConfigurator: Successfully connected to ...</span><br></pre></td></tr></tbody></table></figure>

<p>Ping检测</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ adb shell ping 114.114.114.114</span><br><span class="line">PING 114.114.114.114 (114.114.114.114) 56(84) bytes of data.</span><br><span class="line">64 bytes from 114.114.114.114: icmp_seq=1 ttl=57 time=6.67 ms</span><br><span class="line">64 bytes from 114.114.114.114: icmp_seq=2 ttl=57 time=55.5 ms</span><br><span class="line">64 bytes from 114.114.114.114: icmp_seq=3 ttl=57 time=23.0 ms</span><br><span class="line">64 bytes from 114.114.114.114: icmp_seq=4 ttl=57 time=245 ms</span><br></pre></td></tr></tbody></table></figure>



<p>#===========</p>
<figure class="highlight vbscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">' ws.run "powershell.exe -nologo -file skaldjfw980923sdfjskaodjf238.ps1",0</span></span><br><span class="line"><span class="keyword">set</span> ws=wscript.<span class="built_in">createobject</span>(<span class="string">"wscript.shell"</span>)</span><br><span class="line">ws.run <span class="string">"powershell.exe -nologo -file skaldjfw980923sdfjskaodjf238.ps1"</span>,<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

<p>skaldjfw980923sdfjskaodjf238.ps1</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$colorArray</span> = <span class="string">"Blue"</span> ,<span class="string">"Green"</span>,<span class="string">"Cyan"</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">"./devices.txt"</span></span><br><span class="line"><span class="variable">$debugPort</span>=<span class="number">5709</span></span><br><span class="line"><span class="variable">$i</span>=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">(<span class="variable">$txt</span>)</span></span>{</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="variable">$txt</span> <span class="literal">-ForegroundColor</span> <span class="variable">$colorArray</span>[<span class="variable">$i</span>%<span class="variable">$colorArray</span><span class="type">.length</span>]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sed</span><span class="params">(<span class="variable">$filespec</span>, <span class="variable">$search</span>, <span class="variable">$replace</span>)</span></span></span><br><span class="line">{</span><br><span class="line">    (<span class="built_in">get-content</span> <span class="variable">$filespec</span>) | <span class="built_in">foreach-object</span> {<span class="variable">$_</span> <span class="operator">-replace</span> <span class="variable">$search</span>, <span class="variable">$replace</span>} | <span class="built_in">set-content</span> <span class="variable">$filespec</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">#adb shell mount -o rw,remount -t ext4 /system</span></span><br><span class="line"><span class="comment">#already connected to 192.168.1.119:5709</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span><span class="params">(<span class="variable">$device</span>)</span></span>{</span><br><span class="line">        print <span class="string">"connect to <span class="variable">$_</span>"</span></span><br><span class="line">        <span class="variable">$ret</span> = adb connect  <span class="variable">$device</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$ret</span>.StartsWith(<span class="string">"cannot"</span>)){</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$ret</span></span><br><span class="line">           <span class="variable">$ret</span> = adb <span class="literal">-s</span> <span class="variable">$device</span> root</span><br><span class="line">           <span class="variable">$ret</span> = adb <span class="literal">-s</span> <span class="variable">$device</span> remount</span><br><span class="line">            <span class="variable">$oldPort</span>=<span class="variable">$device</span>.split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$oldPort</span> <span class="operator">-ne</span> <span class="variable">$debugPort</span>){</span><br><span class="line">                print <span class="string">"update debug prot <span class="variable">$oldPort</span> to <span class="variable">$debugPort</span>"</span></span><br><span class="line">                adb <span class="literal">-s</span> <span class="variable">$device</span> shell sed <span class="literal">-i</span> <span class="string">"s/port=<span class="variable">$oldPort</span>/port=<span class="variable">$debugPort</span>/"</span> /system/build.prop</span><br><span class="line">                <span class="variable">$new</span> = <span class="variable">$device</span>.split(<span class="string">':'</span>)[<span class="number">0</span>]+<span class="string">":"</span>+<span class="variable">$debugPort</span></span><br><span class="line">                sed <span class="variable">$file</span> <span class="variable">$device</span> <span class="variable">$new</span></span><br><span class="line">            }</span><br><span class="line">            print <span class="string">"setup screen immersive full"</span></span><br><span class="line">            adb <span class="literal">-s</span> <span class="variable">$device</span> shell settings put global policy_control immersive.full=*</span><br><span class="line">            <span class="variable">$bootanimation</span>=<span class="built_in">Test-Path</span> <span class="literal">-Path</span> bootanimation.zip</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$bootanimation</span>){</span><br><span class="line">                print <span class="string">"setup bootanimation"</span></span><br><span class="line">                adb <span class="literal">-s</span> <span class="variable">$device</span> push bootanimation.zip /system/media/</span><br><span class="line">            }</span><br><span class="line">            adb <span class="literal">-s</span> <span class="variable">$device</span> shell <span class="built_in">rm</span> <span class="literal">-rf</span> /<span class="keyword">data</span>/app/com.idflc.waste* /system/app/Idflc/*</span><br><span class="line">            <span class="variable">$apk</span> = <span class="built_in">Get-ChildItem</span> <span class="literal">-Filter</span> *.apk <span class="comment"># | Select-Object -First 1</span></span><br><span class="line">            print <span class="string">"upload apk files"</span></span><br><span class="line">            adb <span class="literal">-s</span> <span class="variable">$device</span> shell mkdir <span class="literal">-p</span> /system/app/Idflc/</span><br><span class="line">            <span class="comment">#adb -s $device push $apk /system/app/Idflc/</span></span><br><span class="line">            adb <span class="literal">-s</span> <span class="variable">$device</span> <span class="literal">-r</span> <span class="literal">-d</span> install <span class="variable">$apk</span></span><br><span class="line">            adb <span class="literal">-s</span> <span class="variable">$device</span> shell <span class="built_in">cp</span> <span class="literal">-r</span> /<span class="keyword">data</span>/app/com.idflc.waste*/* /system/app/Idflc/</span><br><span class="line">            <span class="comment">#adb -s $device shell rm -rf /system/app/Idflc/base.apk</span></span><br><span class="line">            <span class="comment">#adb -s $device reboot</span></span><br><span class="line">            print <span class="string">"setup <span class="variable">$device</span> success , rebooting now ..."</span></span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">"connect to <span class="variable">$device</span> error"</span> <span class="literal">-ForegroundColor</span> Red</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#adb -s %i install -r %1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># del devices.txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏虚拟键及顶部状态栏：</span></span><br><span class="line"><span class="comment"># adb shell settings put global policy_control immersive.full=*</span></span><br><span class="line"><span class="comment"># 隐藏顶部状态栏（底部虚拟键会显示）：</span></span><br><span class="line"><span class="comment"># adb shell settings put global policy_control immersive.status=*</span></span><br><span class="line"><span class="comment"># 隐藏虚拟键（顶部状态栏会显示）：</span></span><br><span class="line"><span class="comment"># adb shell settings put global policy_control immersive.navigation=*</span></span><br><span class="line"><span class="comment"># 恢复原来的设置：</span></span><br><span class="line"><span class="comment"># adb shell settings put global policy_control null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$content</span> = <span class="built_in">get-content</span> <span class="variable">$file</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$content</span> | <span class="built_in">foreach-object</span> {</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$_</span>.StartsWith(<span class="string">"#"</span>)) {</span><br><span class="line">        print <span class="string">""</span></span><br><span class="line">        print  <span class="string">"============================= start setup <span class="variable">$_</span>  ============================="</span></span><br><span class="line">        setup <span class="variable">$_</span></span><br><span class="line">        print <span class="string">"=============================  setup <span class="variable">$_</span> over ============================="</span> </span><br><span class="line">        <span class="variable">$i</span>++</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

]]></content>
  </entry>
  <entry>
    <title>HTML 规范</title>
    <url>/2020/01/16/html/</url>
    <content><![CDATA[<h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><h2 id="DOCTYPE-声明"><a href="#DOCTYPE-声明" class="headerlink" title="DOCTYPE 声明"></a>DOCTYPE 声明</h2><p>一个DOCTYPE必须包含以下部分，并严格按照顺序出现：</p>
<blockquote>
<ol>
<li>A string that is an ASCII case-insensitive match for the string “&lt;!DOCTYPE”.</li>
<li>One or more space characters.</li>
<li>A string that is an ASCII case-insensitive match for the string “html”.</li>
<li>Optionally, a DOCTYPE legacy string or an obsolete permitted DOCTYPE string (defined below).</li>
<li>Zero or more space characters.</li>
<li>A “&gt;” (U+003E) character.</li>
</ol>
</blockquote>
<ol>
<li>一个ASCII字符串 “&lt;!DOCTYPE” ，大小写不敏感</li>
<li>一个或多个空白字符</li>
<li>一个ASCII字符串”html”，大小写不敏感</li>
<li>一个可选的历史遗留的DOCTYPE字符串 （<a href="http://www.w3.org/TR/2014/REC-html5-20141028/syntax.html#doctype-legacy-string">DOCTYPE legacy string</a>），或者一个可选的已过时但被允许的DOCTYPE字符串 （<a href="http://www.w3.org/TR/2014/REC-html5-20141028/syntax.html#obsolete-permitted-doctype-string">obsolete permitted DOCTYPE string</a>） 字符串</li>
<li>一个或多个空白字符</li>
<li>一个编码为 U+003E 的字符 “&gt;”</li>
</ol>
<h3 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h3><p>HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="更多关于-DOCTYPE声明"><a href="#更多关于-DOCTYPE声明" class="headerlink" title="更多关于 DOCTYPE声明"></a>更多关于 DOCTYPE声明</h3><p><a href="http://www.w3.org/TR/2014/REC-html5-20141028/syntax.html#the-doctype">#The DOCTYPE</a></p>
<h2 id="页面语言LANG"><a href="#页面语言LANG" class="headerlink" title="页面语言LANG"></a>页面语言LANG</h2><p>Lang属性的取值应该遵循互联网工程任务组–IETF（The Internet Engineering Task Force）制定的关于语言标签的文档 <a href="http://tools.ietf.org/html/bcp47">BCP 47 - Tags for Identifying Languages</a></p>
<h3 id="团队约定-1"><a href="#团队约定-1" class="headerlink" title="团队约定"></a>团队约定</h3><p>推荐使用属性值 <code>cmn-Hans-CN</code>（简体, 中国大陆），但是考虑浏览器和操作系统的兼容性，目前仍然使用 <code>zh-CN</code> 属性值</p>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">&lt;html <span class="attribute">lang</span>=<span class="string">"zh-CN"</span>&gt;</span><br></pre></td></tr></tbody></table></figure>



<p>更多地区语言参考：</p>
<figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">zh-SG</span> 中文 (简体, 新加坡)   对应 <span class="selector-tag">cmn-Hans-SG</span> 普通话 (简体, 新加坡)</span><br><span class="line"><span class="selector-tag">zh-HK</span> 中文 (繁体, 香港)     对应 <span class="selector-tag">cmn-Hant-HK</span> 普通话 (繁体, 香港)</span><br><span class="line"><span class="selector-tag">zh-MO</span> 中文 (繁体, 澳门)     对应 <span class="selector-tag">cmn-Hant-MO</span> 普通话 (繁体, 澳门)</span><br><span class="line"><span class="selector-tag">zh-TW</span> 中文 (繁体, 台湾)     对应 <span class="selector-tag">cmn-Hant-TW</span> 普通话 (繁体, 台湾)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="已废弃不推荐使用的-Languages-Tags"><a href="#已废弃不推荐使用的-Languages-Tags" class="headerlink" title="已废弃不推荐使用的 Languages Tags"></a>已废弃不推荐使用的 Languages Tags</h4><p>以下写法已于 2009 年废弃，请勿使用（cmn、wuu、yue、gan 等已由 2005 年的 extlang 升级到 2009 年的 language）：</p>
<figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">zh</span>-cmn, <span class="built_in">zh</span>-cmn-Hans, <span class="built_in">zh</span>-cmn-Hant, <span class="built_in">zh</span>-wuu, <span class="built_in">zh</span>-yue, <span class="built_in">zh</span>-gan</span><br></pre></td></tr></tbody></table></figure>

<p>以下写法已于 2009 年废弃，不推荐使用：</p>
<figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">zh</span>-Hans, <span class="built_in">zh</span>-Hans-CN, <span class="built_in">zh</span>-Hans-SG, <span class="built_in">zh</span>-Hans-HK, <span class="built_in">zh</span>-Hans-MO, <span class="built_in">zh</span>-Hans-TW, </span><br><span class="line"><span class="built_in">zh</span>-Hant, <span class="built_in">zh</span>-Hant-CN, <span class="built_in">zh</span>-Hant-SG, <span class="built_in">zh</span>-Hant-HK, <span class="built_in">zh</span>-Hant-MO, <span class="built_in">zh</span>-Hant-TW</span><br></pre></td></tr></tbody></table></figure>

<p>更多已废弃 Languages Tags 参考 <a href="http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry">IANA Language Subtag Registry</a> 里面的 “Type: redundant“”</p>
<h4 id="更多关于-Languages-Tags-："><a href="#更多关于-Languages-Tags-：" class="headerlink" title="更多关于 Languages Tags ："></a>更多关于 Languages Tags ：</h4><p><a href="http://www.w3.org/International/articles/language-tags/">W3C Language tags in HTML and XML</a></p>
<p><a href="http://www.zhihu.com/question/20797118?utm_source=weibo&amp;utm_medium=weibo_share&amp;utm_content=share_question&amp;utm_campaign=share_sidebar">网页头部的声明应该是用 lang=”zh” 还是 lang=”zh-cn”？</a></p>
<h2 id="CHARSET"><a href="#CHARSET" class="headerlink" title="CHARSET"></a>CHARSET</h2><blockquote>
<p>Because the character sets in ISO-8859 was limited in size, and not compatible in multilingual environments, the Unicode Consortium developed the Unicode Standard.</p>
<p>The Unicode Standard covers (almost) all the characters, punctuations, and symbols in the world.</p>
<p>Unicode enables processing, storage, and transport of text independent of platform and language.</p>
<p>The default character encoding in HTML-5 is UTF-8.</p>
</blockquote>
<p>因为 ISO-8859 中字符集大小是有限的，且在多语言环境中不兼容，所以 Unicode 联盟开发了 Unicode 标准。</p>
<p>Unicode 标准覆盖了（几乎）所有的字符、标点符号和符号。</p>
<p>Unicode 使文本的处理、存储和运输，独立于平台和语言。</p>
<p>HTML-5 中默认的字符编码是 UTF-8</p>
<p>参阅 <a href="http://www.w3schools.com/charsets/ref_html_utf8.asp">HTML Unicode (UTF-8) Reference</a></p>
<h3 id="团队约定-2"><a href="#团队约定-2" class="headerlink" title="团队约定"></a>团队约定</h3><p>一般情况下统一使用 “UTF-8” 编码</p>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">&lt;meta <span class="attribute">charset</span>=<span class="string">"UTF-8"</span>&gt;</span><br></pre></td></tr></tbody></table></figure>



<p>由于历史原因，有些业务可能会使用 “GBK” 编码</p>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">&lt;meta <span class="attribute">charset</span>=<span class="string">"GBK"</span>&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>请尽量统一写成标准的 “UTF-8”，不要写成 “utf-8” 或 “utf8” 或 “UTF8”。根据 <a href="http://www.ietf.org/rfc/rfc3629">IETF对UTF-8的定义</a>，其编码标准的写法是 “UTF-8”；而 UTF8 或 utf8 的写法只是出现在某些编程系统中，如 .NET framework 的类 System.Text.Encoding 中的一个属性名就叫 UTF8。</p>
<h4 id="更多关于"><a href="#更多关于" class="headerlink" title="更多关于"></a>更多关于</h4><p>UTF-8写法: <a href="http://stackoverflow.com/questions/809620/utf8-or-utf-8">UTF8 or UTF-8?</a></p>
<p>GBK：<a href="http://www.ietf.org/assignments/charset-reg/GBK">Application of IANA Charset Registration for GBK</a></p>
<p>Charset ：<a href="http://www.w3.org/TR/html5/document-metadata.html#character-encoding-declaration">character-encoding-declaration</a></p>
<h2 id="元素及标签闭合"><a href="#元素及标签闭合" class="headerlink" title="元素及标签闭合"></a>元素及标签闭合</h2><p>HTML元素共有以下5种：</p>
<ul>
<li>空元素：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr</li>
<li>原始文本元素：script、style</li>
<li>RCDATA元素：textarea、title</li>
<li>外来元素：来自MathML命名空间和SVG命名空间的元素。</li>
<li>常规元素：其他HTML允许的元素都称为常规元素。</li>
</ul>
<p>元素标签的闭合应遵循以下原则：</p>
<blockquote>
<p>Tags are used to delimit the start and end of elements in the markup. Raw text, escapable raw text, and normal elements have a start tag to indicate where they begin, and an end tag to indicate where they end. The start and end tags of certain normal elements can be omitted, as described below in the section on optional tags. Those that cannot be omitted must not be omitted. Void elements only have a start tag; end tags must not be specified for void elements. Foreign elements must either have a start tag and an end tag, or a start tag that is marked as self-closing, in which case they must not have an end tag.</p>
</blockquote>
<ul>
<li>原始文本元素、RCDATA元素以及常规元素都有一个开始标签来表示开始，一个结束标签来表示结束。</li>
<li><a href="http://www.w3.org/TR/html5/syntax.html#optional-tags">某些元素的开始和结束标签是可以省略的</a>，如果规定标签不能被省略，那么就绝对不能省略它。</li>
<li>空元素只有一个开始标签，且不能为空元素设置结束标签。</li>
<li>外来元素可以有一个开始标签和配对的结束标签，或者只有一个自闭合的开始标签，且后者情况下该元素不能有结束标签。</li>
</ul>
<h3 id="团队约定-3"><a href="#团队约定-3" class="headerlink" title="团队约定"></a>团队约定</h3><p>为了能让浏览器更好的解析代码以及能让代码具有更好的可读性，有如下约定：</p>
<ul>
<li>所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上。</li>
<li>空元素标签都不加 “/” 字符</li>
</ul>
<p><em>推荐：</em></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一段文字，我有始有终，浏览器能正确解析<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一段文字，我有始无终，浏览器亦能正确解析</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>更多关于元素及标签关闭：<a href="http://www.w3.org/TR/html5/syntax.html#elements-0">#Elements</a></p>
<h2 id="书写风格"><a href="#书写风格" class="headerlink" title="书写风格"></a>书写风格</h2><h3 id="HTML代码大小写"><a href="#HTML代码大小写" class="headerlink" title="HTML代码大小写"></a>HTML代码大小写</h3><p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p>
<p><em>推荐：</em></p>
<figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"demo"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="keyword">class</span>=<span class="string">"DEMO"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;<span class="keyword">DIV</span> <span class="keyword">CLASS</span>=<span class="string">"DEMO"</span>&gt;&lt;/<span class="keyword">DIV</span>&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>HTML文本、CDATA、JavaScript、meta标签某些属性等内容可大小写混合</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 优先使用 IE 最新版本和 Chrome Frame --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML文本内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I AM WHAT I AM <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> demoName = <span class="string">'demoName'</span>;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- CDATA 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">...</span><br><span class="line">]]&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="类型属性"><a href="#类型属性" class="headerlink" title="类型属性"></a>类型属性</h3><p>不需要为 CSS、JS 指定类型属性，HTML5 中默认已包含</p>
<p><em>推荐：</em></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">""</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">""</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">""</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h3><ul>
<li>元素属性值使用双引号语法</li>
<li>元素属性值可以写上的都写上</li>
</ul>
<p><em>推荐：</em></p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="text"&gt;</span><br><span class="line">    </span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="radio" <span class="type">name</span>="name" checked="checked" &gt;</span><br></pre></td></tr></tbody></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="type">text</span>&gt;	</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">'text'</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="radio" <span class="type">name</span>="name" checked &gt;</span><br></pre></td></tr></tbody></table></figure>

<p>更多关于元素属性：<a href="http://www.w3.org/TR/html5/syntax.html#attributes-0">#Attributes</a></p>
<h3 id="特殊字符引用"><a href="#特殊字符引用" class="headerlink" title="特殊字符引用"></a>特殊字符引用</h3><blockquote>
<p>In certain cases described in other sections, text may be mixed with character references. These can be used to escape characters that couldn’t otherwise legally be included in text.</p>
</blockquote>
<p>文本可以和字符引用混合出现。这种方法可以用来转义在文本中不能合法出现的字符。</p>
<p>在 HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体</p>
<p><em>推荐：</em></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>more<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>more&gt;&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>更多关于符号引用：<a href="http://www.w3.org/TR/html5/syntax.html#character-references">#Character references</a></p>
<h3 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="<span class="symbol">jdc</span>"&gt;</span><br><span class="line">    &lt;<span class="symbol">a</span> <span class="symbol">href</span>="#"&gt;&lt;/<span class="symbol">a</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="纯数字输入框"><a href="#纯数字输入框" class="headerlink" title="纯数字输入框"></a>纯数字输入框</h3><p>使用 <code>type="tel"</code> 而不是 <code>type="number"</code></p>
<figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"tel"</span>&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="代码嵌套"><a href="#代码嵌套" class="headerlink" title="代码嵌套"></a>代码嵌套</h3><p>元素嵌套规范，每个块状元素独立一行，内联元素可选</p>
<p><em>推荐：</em></p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">&lt;div&gt;</span></span><br><span class="line">    <span class="section">&lt;h1&gt;</span><span class="section">&lt;/h1&gt;</span></span><br><span class="line">    <span class="section">&lt;p&gt;</span><span class="section">&lt;/p&gt;</span></span><br><span class="line"><span class="section">&lt;/div&gt;</span>	</span><br><span class="line"><span class="section">&lt;p&gt;</span><span class="section">&lt;span&gt;</span><span class="section">&lt;/span&gt;</span><span class="section">&lt;span&gt;</span><span class="section">&lt;/span&gt;</span><span class="section">&lt;/p&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">&lt;div&gt;</span></span><br><span class="line">    <span class="section">&lt;h1&gt;</span><span class="section">&lt;/h1&gt;</span><span class="section">&lt;p&gt;</span><span class="section">&lt;/p&gt;</span></span><br><span class="line"><span class="section">&lt;/div&gt;</span>	</span><br><span class="line"><span class="section">&lt;p&gt;</span> </span><br><span class="line">    <span class="section">&lt;span&gt;</span><span class="section">&lt;/span&gt;</span></span><br><span class="line">    <span class="section">&lt;span&gt;</span><span class="section">&lt;/span&gt;</span></span><br><span class="line"><span class="section">&lt;/p&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>段落元素与标题元素只能嵌套内联元素</p>
<p><em>推荐：</em></p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">&lt;h1&gt;</span><span class="section">&lt;span&gt;</span><span class="section">&lt;/span&gt;</span><span class="section">&lt;/h1&gt;</span></span><br><span class="line"><span class="section">&lt;p&gt;</span><span class="section">&lt;span&gt;</span><span class="section">&lt;/span&gt;</span><span class="section">&lt;span&gt;</span><span class="section">&lt;/span&gt;</span><span class="section">&lt;/p&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">&lt;h1&gt;</span><span class="section">&lt;div&gt;</span><span class="section">&lt;/div&gt;</span><span class="section">&lt;/h1&gt;</span></span><br><span class="line"><span class="section">&lt;p&gt;</span><span class="section">&lt;div&gt;</span><span class="section">&lt;/div&gt;</span><span class="section">&lt;div&gt;</span><span class="section">&lt;/div&gt;</span><span class="section">&lt;/p&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>编码规范</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>编码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>技术</title>
    <url>/2020/01/16/index/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/06/24/minio/</url>
    <content><![CDATA[<p>minIO</p>
<p><a href="https://www.cnblogs.com/eason-d/p/12711041.html">Docker 安装 minio</a></p>
<p>参考地址: <a href="https://www.jianshu.com/p/52dbc679094a">https://www.jianshu.com/p/52dbc679094a</a></p>
<p>注意的地方:</p>
<p>echo 命令设置 ACCESS_KEY 和 SECRET_KEY</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"admin"</span> | docker secret create access_key -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"12345678"</span> | docker secret create secret_key </span><br><span class="line">-此处secret_key长度至少8位, 若已经设置密码不足8位，可通过命令</span><br><span class="line">docker secret --<span class="built_in">help</span></span><br><span class="line">查看相关命令中</span><br><span class="line">docker secret rm secret_key</span><br><span class="line">来移除 若执行出现 Error response from daemon: This node is not a swarm manager. Use <span class="string">"docker swarm init"</span> or <span class="string">"docker swarm join"</span> to connect this node to swarm and try again.错误, 需执行</span><br><span class="line">docker swarm init</span><br></pre></td></tr></tbody></table></figure>

<p>启动命令</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker run -itd -p 9000:9000 --name minio1   -e <span class="string">"MINIO_ACCESS_KEY=admin"</span>   -e <span class="string">"MINIO_SECRET_KEY=admin"</span>   -v /mnt/data:/data   -v /mnt/config:/root/.minio   minio/minio server /data</span><br></pre></td></tr></tbody></table></figure>

<p>打开网址: <a href="http://x.x.x.x:9000/">http://x.x.x.x:9000/</a> 发现启动失败, 但是改回原来的用户密钥 正确 估计是用户名有问题， 最后使用默认的方式启动,</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker run -itd -p 9000:9000 --name minio1   -e <span class="string">"MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE"</span>   -e <span class="string">"MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"</span>   -v /mnt/data:/data   -v /mnt/config:/root/.minio   minio/minio server /data</span><br></pre></td></tr></tbody></table></figure>

<p>docker-compose.yml</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ACCESS_KEY=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_SECRET_KEY=admin123456</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'9000:9000'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'minio_data:/data'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'config:/root/.minio'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">minio_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br></pre></td></tr></tbody></table></figure>



<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio \</span><br><span class="line">  -v /mnt/data1:/data1 \</span><br><span class="line">  -v /mnt/data2:/data2 \</span><br><span class="line">  -v /mnt/data3:/data3 \</span><br><span class="line">  -v /mnt/data4:/data4 \</span><br><span class="line">  -v /mnt/data5:/data5 \</span><br><span class="line">  -v /mnt/data6:/data6 \</span><br><span class="line">  -v /mnt/data7:/data7 \</span><br><span class="line">  -v /mnt/data8:/data8 \</span><br><span class="line">  minio/minio server /data1 /data2 /data3 /data4 /data5 /data6 /data7 /data8</span><br></pre></td></tr></tbody></table></figure>]]></content>
  </entry>
  <entry>
    <title>TimescaleDB 安装&amp;使用</title>
    <url>/2021/04/03/db/timescaledb/</url>
    <content><![CDATA[<h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">timescaledb:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgistime</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">timescale/timescaledb-postgis:latest-pg13</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5432:5432"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">xxx</span> </span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">postgres</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">xxxxx</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/postgresql:rw</span></span><br></pre></td></tr></tbody></table></figure>



<p>使用TimescaleDB建表时，最好将非超表字段默认设为null警告：如果将任何其他列的默认值设置为NULL，则更改表的架构将非常有效。如果默认值设置为非null值，则TimescaleDB将需要为属于该超表的所有行（所有块）填充该值。</p>
<h2 id="创建超表"><a href="#创建超表" class="headerlink" title="创建超表:"></a>创建超表:</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--1.创建标准表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> conditions (</span><br><span class="line">  <span class="type">time</span>        TIMESTAMPTZ       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  location    TEXT              <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  temperature <span class="type">DOUBLE PRECISION</span>  <span class="keyword">NULL</span>,</span><br><span class="line">  humidity    <span class="type">DOUBLE PRECISION</span>  <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.将标准表转换成超表，将时间字段作为分片字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> create_hypertable(<span class="string">'conditions'</span>, <span class="string">'time'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--3.操作超表，跟普通数据库操作一样</span></span><br><span class="line"><span class="comment">--插入与查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> conditions(<span class="type">time</span>, location, temperature, humidity)</span><br><span class="line">  <span class="keyword">VALUES</span> (NOW(), <span class="string">'office'</span>, <span class="number">70.0</span>, <span class="number">50.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> conditions <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">time</span> <span class="keyword">DESC</span> LIMIT <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改超级表</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> conditions</span><br><span class="line">  <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> humidity <span class="type">DOUBLE PRECISION</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除超表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> conditions;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>TimescaleDB的用户经常有两个常见问题：<br>我应该为时间分割配置多长时间？<br>我应该使用空间分区吗？应该使用多少个空间分区？<br>时间间隔：超表默认时间间隔是，从v0.11.0开始的7天和v0.11.0之前的1个月。<br>设置时间间隔原则：所有超表时间间隔总块的大小不超过主内存的25%。比如电脑内存是16G，总共10台设备，每50ms存一条数据，1秒钟存20条数据，一天存的数据条数为：2036002410约等于1千700万条，大小大概约为1G，一天存1G数据，电脑内存为16G，总块大小不超过4G，所以时间间隔设为小于4天。<br>虽然通常将块做成较小而不是太大是比较安全的，但是将间隔设置得太小会导致很多块，这对应于某些类型的查询的计划等待时间的增加，所以将时间间隔设为3天比较合适。<br>设置时间间隔：1.通过chunk_time_interval在创建超表时进行设置来显式配置时间间隔<br>chunk_time_interval：块覆盖时间精确到纳秒，一天是100010006060*24<br>实例：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> create_hypertable(<span class="string">'conditions'</span>, <span class="string">'time'</span>, chunk_time_interval <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">86400000000</span>);</span><br><span class="line"><span class="keyword">SELECT</span> create_hypertable(<span class="string">'conditions'</span>, <span class="string">'time'</span>, chunk_time_interval <span class="operator">=</span><span class="operator">&gt;</span> <span class="type">interval</span> <span class="string">'1 day'</span>)<span class="comment">--：指定块的覆盖时间是1天</span></span><br></pre></td></tr></tbody></table></figure>
<p>2.创建超表之后，可以通过调用更改用于新块的间隔set_chunk_time_interval<br>例子：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> set_chunk_time_interval(<span class="string">'conditions'</span>, <span class="type">interval</span> <span class="string">'24 hours'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> set_chunk_time_interval(<span class="string">'conditions'</span>, <span class="number">86400000000</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>模式管理<br>创建索引</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX <span class="keyword">ON</span> conditions (location, <span class="type">time</span> <span class="keyword">DESC</span>);</span><br></pre></td></tr></tbody></table></figure>

<p><strong>创建索引的好处：</strong>创建索引之后，能有效地提高查询数据效率。<br><strong>创建索引和使用查询语句的原则：</strong>查询语句的筛选条件顺序根据创建索引的规则来排序。<br>按时间分区建超表时，timescaledb会自动在表数据上创建时间索引。<br>建议：一个表建一个复合索引，然后查询语句按照创建的索引字段顺序来查询语句</p>
<p>创建触发器<br>TimescaleDB支持触发器的全域（也即是触发器触发的时刻）：BEFORE INSERT，AFTER INSERT，BEFORE UPDATE，AFTER UPDATE，BEFORE DELETE，AFTER DELETE<br>创建触发器：创建一个触发器，只要在超表中插入新行，该触发器便会调用此函数</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> record_error</span><br><span class="line">  BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> conditions</span><br><span class="line">  <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">  <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> record_error();</span><br></pre></td></tr></tbody></table></figure>
<p>创建触发器函数：<br>好处，减少程序执行的代码，让数据库来执行。更加好的来分配任务。</p>
<p>添加约束<br>1.约束某个字段值得范围<br>2.某个字段外键约束<br>3.将两个字段设为主键</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> conditions (</span><br><span class="line">    <span class="type">time</span>       TIMESTAMPTZ</span><br><span class="line">    temp       <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    device_id  <span class="type">INTEGER</span> <span class="keyword">CHECK</span> (device_id <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line">    location   <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> locations (id),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(<span class="type">time</span>, device_id)</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="keyword">UNIQUE</span>(<span class="type">time</span>, device_id, location)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">SELECT</span> create_hypertable(<span class="string">'conditions'</span>, <span class="string">'time'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>创建Json类型表字段</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> metrics (</span><br><span class="line">  <span class="type">time</span> TIMESTAMPTZ,</span><br><span class="line">  user_id <span class="type">INT</span>,</span><br><span class="line">  device_id <span class="type">INT</span>,</span><br><span class="line">  data JSONB</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<p>创建Json类型表字段慎用,最好别用。<br>数据库JSON字段设计思路：<a href="https://www.cnblogs.com/xiashiwendao/p/6985093.html">https://www.cnblogs.com/xiashiwendao/p/6985093.html</a></p>
<p>插入数据<br>在插入语句时使用ON CONFLICT不执行任何操作：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> conditions</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="string">'2017-07-28 11:42:42.846621+00'</span>, <span class="string">'office'</span>, <span class="number">70.1</span>, <span class="number">50.0</span>)</span><br><span class="line">  <span class="keyword">ON</span> CONFLICT DO NOTHING;</span><br></pre></td></tr></tbody></table></figure>
<p>在插入语句时更新现有数据：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> conditions</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="string">'2017-07-28 11:42:42.846621+00'</span>, <span class="string">'office'</span>, <span class="number">70.2</span>, <span class="number">50.1</span>)</span><br><span class="line">  <span class="keyword">ON</span> CONFLICT (<span class="type">time</span>, location) DO UPDATE</span><br><span class="line">    <span class="keyword">SET</span> temperature <span class="operator">=</span> excluded.temperature,</span><br><span class="line">        humidity <span class="operator">=</span> excluded.humidity;</span><br></pre></td></tr></tbody></table></figure>
<p>使用ON CONFLICT的好处，当批量插入数据时，使用ON CONFLICT，整个事务不会失败，仅仅只是跳过有冲突的行。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> conditions</span><br><span class="line">  <span class="keyword">VALUES</span></span><br><span class="line">    (NOW(), <span class="string">'office'</span>, <span class="number">70.0</span>, <span class="number">50.0</span>),</span><br><span class="line">    (NOW(), <span class="string">'basement'</span>, <span class="number">66.5</span>, <span class="number">60.0</span>),</span><br><span class="line">    (NOW(), <span class="string">'garage'</span>, <span class="number">77.0</span>, <span class="number">65.2</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>提醒：在后面着重的去看看读取数据，可视化数据，提取数据，超表管理，分析工具，实用程序/统计。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>时序</category>
        <category>IOT</category>
        <category>DB</category>
      </categories>
      <tags>
        <tag>db</tag>
        <tag>service</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-cli</title>
    <url>/2020/06/08/dcloud/uni-app/</url>
    <content><![CDATA[<p>【<a href="https://uniapp.dcloud.io/quickstart?id=%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85">UNI-CLI</a>】</p>
<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a><a href="https://uniapp.dcloud.io/quickstart?id=%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85">环境安装</a></h3><p>全局安装vue-cli</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></tbody></table></figure>

<h3 id="创建uni-app"><a href="#创建uni-app" class="headerlink" title="创建uni-app"></a><a href="https://uniapp.dcloud.io/quickstart?id=%E5%88%9B%E5%BB%BAuni-app-1">创建uni-app</a></h3><p><strong>使用正式版</strong>（对应HBuilderX最新正式版）</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vue create -p dcloudio/uni-preset-vue my-project</span><br></pre></td></tr></tbody></table></figure>

<p><strong>使用alpha版</strong>（对应HBuilderX最新alpha版）</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vue create -p dcloudio/uni-preset-vue#alpha my-alpha-project</span><br></pre></td></tr></tbody></table></figure>

<p>此时，会提示选择项目模板，初次体验建议选择 <code>hello uni-app</code> 项目模板，如下所示：</p>
]]></content>
      <categories>
        <category>uni-app</category>
      </categories>
      <tags>
        <tag>uni</tag>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/02/es/postgis/</url>
    <content><![CDATA[<p>docker 安装(<a href="https://www.vultr.com/docs/install-the-postgis-extension-for-postgresql-on-ubuntu-linux">https://www.vultr.com/docs/install-the-postgis-extension-for-postgresql-on-ubuntu-linux</a>)</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">安装 gis:</span><br><span class="line">sudo apt install postgis postgresql-12-postgis-3</span><br><span class="line">apt-get install postgresql-12-postgis-3-scripts</span><br><span class="line"></span><br><span class="line">选择数据库&gt;sql</span><br><span class="line">CREATE EXTENSION postgis;</span><br></pre></td></tr></tbody></table></figure>





<p>全文检索</p>
<p><a href="https://github.com/hightman/scws">https://github.com/hightman/scws</a></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> install bzip2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /opt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wget http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar -jxvf ./scws-1.2.3.tar.bz2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> scws-1.2.3/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./configure</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> make</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ldconfig</span></span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://github.com/amutu/zhparser">https://github.com/amutu/zhparser</a></p>
<p>apt install -y postgresql-server-dev-12</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">PG_CONFIG=/usr/lib/postgresql/<span class="number">13</span>/bin/pg_config make </span><br><span class="line">PG_CONFIG=/usr/lib/postgresql/<span class="number">13</span>/bin/pg_config make install</span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://mlog.club/article/2514326">https://mlog.club/article/2514326</a></p>
<p> <strong>CREATE</strong> <strong>INDEX</strong> mytable_description_tsvector_idx <strong>ON</strong> mytable(to_tsvector(description))  <strong>WHERE</strong> created_at &gt; <strong>now</strong>() - ‘1 year’::interval;</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 安装扩展</span></span><br><span class="line"><span class="keyword">CREATE</span> EXTENSION zhparser;</span><br><span class="line"><span class="comment">-- 中文分词配置</span></span><br><span class="line"><span class="keyword">CREATE</span> TEXT <span class="keyword">SEARCH</span> CONFIGURATION chinese_parser (PARSER <span class="operator">=</span> zhparser);</span><br><span class="line"><span class="keyword">ALTER</span> TEXT <span class="keyword">SEARCH</span> CONFIGURATION chinese_parser <span class="keyword">ADD</span> MAPPING <span class="keyword">FOR</span> n,v,a,i,e,l,j <span class="keyword">WITH</span> simple;</span><br><span class="line"><span class="comment">-- create test table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> text_search(</span><br><span class="line">  text_id SERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    text_name <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">  text_content TEXT,</span><br><span class="line">  tsv_column tsvector</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 创建gin_index以加快匹配速度</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_gin_tsv <span class="keyword">ON</span> text_search <span class="keyword">USING</span> GIN(tsv_column);</span><br><span class="line"><span class="comment">-- 创建触发器以从目标同步tsvector列</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> sync_trigger </span><br><span class="line">   BEFORE <span class="keyword">INSERT</span> <span class="keyword">OR</span> UPDATE <span class="keyword">ON</span> text_search <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line">   <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> </span><br><span class="line">   tsvector_update_trigger(tsv_column, <span class="string">'public.chinese_parser'</span>, text_name , text_content);</span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> text_search(text_name,text_content) <span class="keyword">VALUES</span> (<span class="string">'黄国宋'</span>,<span class="string">'ThinkPad 小红点多功能蓝牙键盘多平台WIN安卓IOS支持 4X30K12182'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> text_search(text_name,text_content) <span class="keyword">VALUES</span> (<span class="string">'陈家豪'</span>,<span class="string">'多平台 富文本 写作软件'</span>);</span><br><span class="line"><span class="comment">-- 搜索关键词</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> text_search <span class="keyword">WHERE</span> tsv_column @@ to_tsquery(<span class="string">'chinese_parser'</span>, <span class="string">'多平台黄国宋'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> text_search <span class="keyword">WHERE</span> tsv_column @@ to_tsquery(<span class="string">'chinese_parser'</span>, <span class="string">'小红点&amp;多平台'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> CONCAT(text_name ,<span class="string">','</span> , text_content) <span class="keyword">FROM</span> text_search</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/10/28/es/pg-es-fdw/</url>
    <content><![CDATA[<h2 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/docker.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.9/docker.html</a></p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">es01:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.9.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es01</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  apt-get update &amp;&amp;    apt-get -y install</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  <span class="comment">#apt-get install python python-pip -y (Python3)</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>安装python3</p>
<p><a href="https://blog.csdn.net/bz0446/article/details/105500585">https://blog.csdn.net/bz0446/article/details/105500585</a></p>
<h2 id="安装fdw"><a href="#安装fdw" class="headerlink" title="安装fdw"></a>安装fdw</h2><p><a href="https://github.com/matthewfranglen/postgres-elasticsearch-fdw">GitHub</a></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_terminate_backend(pid) <span class="keyword">from</span> pg_stat_activity <span class="keyword">where</span> DATNAME <span class="operator">=</span> <span class="string">'gis'</span>;</span><br></pre></td></tr></tbody></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/03/es/superset/</url>
    <content><![CDATA[<h1 id="Superset"><a href="#Superset" class="headerlink" title="Superset"></a>Superset</h1><p><a href="https://blog.csdn.net/whq12789/article/details/89640453">https://blog.csdn.net/whq12789/article/details/89640453</a></p>
<p>准备环境docker</p>
<p>然后执行命令</p>
<p>docker pull amancevice/superset</p>
<p>docker run –detach –name superset -p 8088:8088 -v ./superset:/usr/local/lib/python3.6/site-packages/superset/ amancevice/superset</p>
<p>docker exec -it superset  superset db upgrade</p>
<p>docker exec -it superset superset-init</p>
<p>回车回车</p>
<p>输入密码</p>
<p>——安装完成</p>
<p>输入IP:8088访问</p>
<p><a href="http://192.168.91.146:8088/">http://192.168.91.146:8088</a></p>
<p>用户名admin</p>
<p>密码是刚才的密码</p>
<p>加数据源</p>
<p>sources——databases</p>
<p>右上角加号：add a new record</p>
<p>Database中填写个名称</p>
<p>SQLAlchemy URI中填写</p>
<p>postgresql://scott:tiger@localhost/mydatabase</p>
<p>加表</p>
<p>sources——tables</p>
<p>右上角加号：add a new record</p>
<p>选择数据库</p>
<p>填写schema和table name即可</p>
<p>点击表进入进行统计处理</p>
<p>点击Datasource &amp; Chart Type——Visualization Type 下的Table字样可以选择Chart形式</p>
<p>需要改源码的话，到docker中的</p>
<p>/usr/local/lib/python3.6/site-packages/superset/</p>
<p>目录</p>
<p>汉化</p>
<p><a href="https://blog.csdn.net/u014589856/article/details/103582824">https://blog.csdn.net/u014589856/article/details/103582824</a></p>
]]></content>
  </entry>
  <entry>
    <title>Anime.js</title>
    <url>/2020/06/05/ops/animejs/</url>
    <content><![CDATA[<h2 id="自己查文档"><a href="#自己查文档" class="headerlink" title="自己查文档"></a>自己查文档</h2><p><a href="https://www.animejs.cn/">官网</a></p>
<p><a href="https://www.animejs.cn/start">使用方法</a> <a href="https://www.animejs.cn/documentation">中文文档</a> <a href="https://codepen.io/collection/XLebem/">Codepen演示</a> <a href="https://www.animejs.cn/demo">基础演示</a> <a href="https://jq.qq.com/?_wv=1027&amp;k=5Xpu4tf">加入QQ群</a> <a href="https://animejs.com/">anime.js 英文网</a> <a href="http://animejs.cc/">备用网址</a></p>
]]></content>
      <categories>
        <category>动画</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>h5</tag>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansiable安装使用</title>
    <url>/2020/04/29/ops/ansible/</url>
    <content><![CDATA[<p><img data-src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1591264607708&amp;di=34d399d4cc0f9bd92ae0644723ce34c7&amp;imgtype=0&amp;src=http://img3.imgtn.bdimg.com/it/u=118371233,1275544235&amp;fm=214&amp;gp=0.jpg"></p>
<p>Ansible is Simple IT Automation</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Ansible 是给 Linux 系统管理员使用的出色自动化工具。它是一种开源配置工具，能让系统管理员可以从一个中心节点（即 Ansible 服务器）管理数百台服务器。将 Ansible 与 Puppet、Chef 和 Salt 等类似工具进行比较时，它是首选的配置工具，因为它不需要任何代理，并且可以工作在 SSH 和 python 上。</p>
<p>[Centos8] <a href="https://blog.csdn.net/F8qG7f9YD02Pe/article/details/103379794">https://blog.csdn.net/F8qG7f9YD02Pe/article/details/103379794</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">yum install epel-release -y #安装epel源</span><br><span class="line">yum install ansible -y</span><br><span class="line">ansible --version #查看ansible版本</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure>


<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/ansible/hosts</span><br></pre></td></tr></tbody></table></figure>



<h2 id="3-设置SSH无密码登录"><a href="#3-设置SSH无密码登录" class="headerlink" title="3.设置SSH无密码登录"></a>3.设置SSH无密码登录</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-agent bash</span><br><span class="line">ssh-add xx</span><br><span class="line">ssh-copy-id root@xx.xx.xx.xx</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Ansiable</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2020/06/04/ops/docker/</url>
    <content><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p>
<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>
<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>
<p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），我们用社区版就可以了。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装依赖</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils&nbsp; device-mapper-persistent-data&nbsp; lvm2</span><br><span class="line">sudo yum-config-manager&nbsp; --add-repo&nbsp; &nbsp;https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></tbody></table></figure>

<p>如果报错：Problem: package docker-ce-3:19.03.4-3.el7.x86_64 requires containerd.io &gt;= 1.2.2-3 那就先装新版的 containerd.io</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure>
<p>再装剩下两个</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">docker --version</span><br><span class="line">sudo systemctl enable docker #开机自启</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Grafana安装使用</title>
    <url>/2020/06/04/ops/grafana/</url>
    <content><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>Frp安装使用</title>
    <url>/2020/04/29/ops/frp/</url>
    <content><![CDATA[<h2 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h2><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。</p>
<p><a href="https://github.com/fatedier/frp">[GitHub]</a>  <a href="https://github.com/fatedier/frp/blob/master/README_zh.md">[官方中文文档]</a>  </p>
<p><a href="https://github.com/fatedier/frp/blob/master/conf/frps_full.ini">frps 完整配置文件</a></p>
<p><a href="https://github.com/fatedier/frp/blob/master/conf/frpc_full.ini">frpc 完整配置文件</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>docker-compose.yml</p>
<p><a href="https://hub.docker.com/r/snowdreamtech/frps">https://hub.docker.com/r/snowdreamtech/frps</a></p>
<p>start frps</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run --restart=always --network host -d -v /etc/frp/frps.ini:/etc/frp/frps.ini --name frps snowdreamtech/frps</span><br></pre></td></tr></tbody></table></figure>
<p>start frpc</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run --restart=always --network host -d -v /etc/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc</span><br></pre></td></tr></tbody></table></figure>

<p>frps.ini</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment">#服务器端端口</span></span><br><span class="line"><span class="attr">bind_port</span>=<span class="number">7000</span></span><br><span class="line"><span class="comment">#客户端连接凭证</span></span><br><span class="line"><span class="attr">privilege_token</span>=foo</span><br><span class="line"><span class="comment">#最大连接数</span></span><br><span class="line"><span class="attr">max_pool_count</span>=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端映射的端口</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务器看板的访问端口</span></span><br><span class="line"><span class="attr">dashboard_port</span>=<span class="number">7500</span></span><br><span class="line"><span class="comment">#服务器看板账户</span></span><br><span class="line"><span class="attr">dashboard_user</span>=root</span><br><span class="line"><span class="attr">dashboard_pwd</span>=rot12</span><br><span class="line"></span><br><span class="line">frpc.ini</span><br><span class="line">​```ini</span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">111.230</span>.<span class="number">248.124</span> </span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># protocol = kcp</span></span><br><span class="line"><span class="attr">privilege_token</span>=foo</span><br><span class="line"></span><br><span class="line"><span class="section">[proxycn]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">172.17</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">custom_domains</span> = *.domain.cn</span><br><span class="line"></span><br><span class="line"><span class="section">[ws]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">172.17</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">custom_domains</span> = proxy.domain.cn</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">45635</span></span><br><span class="line"></span><br><span class="line"><span class="section">[proxycom]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">172.17</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">custom_domains</span> = *.domain.com</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">172.17</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">14222</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>Grafana+Promethus+Altermanager</title>
    <url>/2020/06/04/ops/grafana-promethus-altermanager/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://github.com/vegasbrianc/prometheus">【Github】</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins 安装使用</title>
    <url>/2020/04/29/ops/jenkins/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo https:*//pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</span><br><span class="line">yum install jenkins -y</span><br><span class="line">systemctl start jenkins</span><br><span class="line">systemctl enable jenkins</span><br></pre></td></tr></tbody></table></figure>

<p><strong>配置文件位置 /etc/sysconfig/jenkins</strong></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cat /root/.jenkins/secrets/initialAdminPassword #查看密码</span><br></pre></td></tr></tbody></table></figure>





<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Groovy-postbuild-插件"><a href="#Groovy-postbuild-插件" class="headerlink" title="Groovy postbuild 插件"></a>Groovy postbuild 插件</h2><h3 id="使用-unirest"><a href="#使用-unirest" class="headerlink" title="使用 unirest"></a>使用 unirest</h3><p>到jenkins 工作目录，plugins/随便找一个包，如jdk-tools/WEB-INF/lib/放入依赖jar</p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = manager.getResult()</span><br><span class="line"><span class="keyword">def</span> jobName = manager.getEnvVariable(<span class="string">"JOB_NAME"</span>)</span><br><span class="line"><span class="keyword">def</span> prod = manager.getEnvVariable(<span class="string">"PROD"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LinkedHashMap textcard = <span class="keyword">new</span> LinkedHashMap()</span><br><span class="line">        textcard.put(<span class="string">"title"</span>, <span class="string">"构建通知"</span>)</span><br><span class="line"></span><br><span class="line">        textcard.put(<span class="string">"description"</span>, <span class="string">"&lt;div class='gray'&gt;"</span> + jobName + <span class="string">"&lt;/div&gt; &lt;br/&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;div class='normal'&gt; 渠　　道："</span> + prod + <span class="string">"&lt;/div&gt; "</span> +</span><br><span class="line">                <span class="string">"&lt;div class='highlight'&gt; 结　　果："</span> + result + <span class="string">"&lt;/div&gt;"</span>)</span><br><span class="line">        textcard.put(<span class="string">"url"</span>, <span class="string">"https://ops.idflc.cn/ci/job/logistics-android/"</span>)</span><br><span class="line">        textcard.put(<span class="string">"btntxt"</span>, <span class="string">"前往"</span>)</span><br><span class="line"></span><br><span class="line">        LinkedHashMap body = <span class="keyword">new</span> LinkedHashMap()</span><br><span class="line"></span><br><span class="line">        body.put(<span class="string">"msgtype"</span>, <span class="string">"textcard"</span>)</span><br><span class="line">        body.put(<span class="string">"enable_id_trans"</span>, <span class="number">0</span>)</span><br><span class="line">        body.put(<span class="string">"enable_duplicate_check"</span>, <span class="number">0</span>)</span><br><span class="line">        body.put(<span class="string">"duplicate_check_interval"</span>, <span class="number">1800</span>)</span><br><span class="line">        body.put(<span class="string">"textcard"</span>, textcard)</span><br><span class="line"></span><br><span class="line">        Object res = kong.unirest.Unirest.post(<span class="string">"http://push.domain.cn/wechat/push/cp001"</span>).</span><br><span class="line">                header(<span class="string">"token"</span>, <span class="string">"test"</span>).</span><br><span class="line">                header(<span class="string">"accept"</span>, <span class="string">"*/*"</span>).header(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>).body(body).</span><br><span class="line">                asJson().getBody().</span><br><span class="line">                getObject()</span><br><span class="line">manager.listener.logger.println(res)</span><br></pre></td></tr></tbody></table></figure>





]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 打包发布</title>
    <url>/2020/04/29/ops/mavenrelease/</url>
    <content><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装使用</title>
    <url>/2020/04/29/ops/nginx/</url>
    <content><![CDATA[<h1 id="Nginx安装使用"><a href="#Nginx安装使用" class="headerlink" title="Nginx安装使用"></a>Nginx安装使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">      </span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/services/nginx/conf:/etc/nginx</span>            <span class="comment">#映射nginx的配置文件到容器里</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/services/nginx/logs:/wwwlogs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/static/:/www</span>                    <span class="comment">#映射nginx的网页目录到容器里</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>nginx.conf</p>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> {</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">102400</span>; <span class="comment">#设置单个工作进程最大连接数102400</span></span><br><span class="line">    <span class="attribute">accept_mutex</span> <span class="literal">on</span>; <span class="comment">#优化同一时刻只有一个请求而避免多个睡眠进程被唤醒的设置，on为防止被同时唤醒，默认为off，因此nginx刚安装完以后要进行适当的优化。</span></span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>; <span class="comment">#打开同时接受多个新网络连接请求的功能。</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>; <span class="comment">#使用epoll事件驱动，因为epoll的性能相比其他事件驱动要好很多</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> {</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="attribute">charset</span> UTF-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>; <span class="comment">#隐藏ngxin版本号</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>; <span class="comment">#配置允许sendfile方式传输文件</span></span><br><span class="line">    <span class="attribute">sendfile_max_chunk</span> <span class="number">512k</span>;   <span class="comment">#Nginx工作进程每次调用sendfile()传输的数据最大不能超出这个值，默认值为0表示无限制，可以设置在http/server/location模块中。</span></span><br><span class="line">   </span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>; <span class="comment">#告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。</span></span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>; <span class="comment">#告诉nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_cache_path</span>  /www/cache/ levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=STATIC:<span class="number">10m</span> inactive=<span class="number">365d</span>  max_size=<span class="number">1g</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /www;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><code>include       /etc/nginx/gzip;</code></p>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">gzip</span>  <span class="literal">on</span>; <span class="comment"># 开启gzip压缩</span></span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>; <span class="comment"># 表示当请求的资源超过1k时，才开启压缩</span></span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>; 	<span class="comment"># 设置压缩所需要的缓冲区大小</span></span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>; 	<span class="comment"># 针对的http版本</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">2</span>; 	<span class="comment"># 压缩级别，级别越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大</span></span><br><span class="line"><span class="comment"># 支持压缩的资源类型，对于前后分离的项目而言，注意下json的压缩支持</span></span><br><span class="line"><span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml application/json text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>; 	<span class="comment"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span></span><br><span class="line"><span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]\."</span>; 	<span class="comment"># 禁用IE 6 gzip</span></span><br><span class="line"><span class="attribute">gzip_proxied</span> any;<span class="comment">#nginx 做前端代理时启用该选项，表示无论后端服务器的headers头返回什么信息，都无条件启用压缩</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p><strong>结合frp内网穿透统一代理配置</strong></p>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配到指定主机，最后要加$ 不然get参数丢失</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ ^/dev_(\d+)_(\d+)/(.*)$</span> {</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.1.<span class="variable">$1</span>:<span class="variable">$2</span>/<span class="variable">$3</span>?$args;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<p>个人开发机外网地址规则:<a href="https://angviza.com/dev_$%7Bip%7D_$%7Bport%7D/">https://angviza.com/dev_${ip}_${port}/</a></p>
<p>ex：<br>内网访问地址为： <a href="http://192.168.1.117:8080/logistics/">http://192.168.1.117:8080/logistics/</a><br>对外网访问地址 :   <a href="https://angviza.com/dev_117_8080/logistics">https://angviza.com/dev_117_8080/logistics</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 安装使用</title>
    <url>/2020/04/29/ops/postgresql/</url>
    <content><![CDATA[<p>是的分解哦就</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://ywnz.com/linuxjc/6033.html">https://ywnz.com/linuxjc/6033.html</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 安装使用</title>
    <url>/2020/04/29/ops/python/</url>
    <content><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><strong>前言</strong></p>
<p>Python是世界上最受欢迎的编程语言之一，凭借其简单易学的语法，Python是初学者和经验丰富的开发人员的流行选择。</p>
<p>当前有两个Python版本正在积极开发中，尽管Python 2得到了良好的支持和活跃，但Python 3被应用得更多，也更为高效，参考<a href="https://ywnz.com/linuxrj/5990.html">Python 3.8.0发布，已提供Python-3.8.0.tgz下载，附更新功能</a>。</p>
<p>默认情况下，RHEL/CentOS 8没有未版本控制的全系统python命令，以避免将用户锁定到特定版本的Python。相反，它使用户可以选择安装、配置和运行特定的Python版本，系统工具（例如yum）使用内部Python二进制文件和库。</p>
<p>本文将引导你逐步在CentOS 8操作系统上安装Python 3和Python 2。</p>
<p><strong>在CentOS 8上安装Python 3</strong></p>
<p>要在CentOS 8上安装Python 3，请以root或sudo用户身份在终端中运行以下命令：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dnf install python3</span></span><br></pre></td></tr></tbody></table></figure>
<p>要验证安装，请输入以下命令检查Python版本：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 --version</span></span><br></pre></td></tr></tbody></table></figure>
<p>参考：<a href="https://ywnz.com/linuxjc/5833.html">在Linux系统中检查Python版本（Python Version）的方法</a>。</p>
<p>在选写本文时，CentOS存储库中可用的Python 3的最新版本是“3.6.x”：</p>
<p>Python 3.6.8</p>
<p>注：该命令还会安装pip。</p>
<p>要运行Python，你需要明确输入python3并运行pip输入pip3。</p>
<p>你应该始终喜欢使用yum或dnf安装发行版提供的python模块，因为它们受支持并经过测试可以在CentOS 8上正常工作，仅在虚拟环境中使用pip，Python虚拟环境允许你将Python模块安装在特定项目的隔离位置，而不必全局安装，这样，你不必担心会影响其他Python项目。</p>
<p>Python 3模块软件包的名称以“python3”为前缀，例如，要安装paramiko模块，应运行：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dnf install python3-paramiko</span></span><br></pre></td></tr></tbody></table></figure>


<p><strong>在CentOS 8上安装Python 2</strong></p>
<p>Python 2软件包也包含在默认的CentOS 8存储库中。</p>
<p>要安装Python 2，请输入以下命令：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dnf install python2</span></span><br></pre></td></tr></tbody></table></figure>
<p>通过键入以下命令验证安装：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python2 --version</span></span><br></pre></td></tr></tbody></table></figure>
<p>输出应如下所示内容：</p>
<p>Python 2.7.15</p>
<p>要执行Python 2，请输入python2，然后运行pip并输入pip2。</p>
<p><strong>设置默认Python版本（Unversioned Python命令）</strong></p>
<p>如果你有希望在系统路径中找到python命令的应用程序，则需要创建unversioned python命令并设置默认版本。</p>
<p>要将Python 3设置为系统范围内的非版本化python命令，请使用Alternatives实用程序：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo alternatives --<span class="built_in">set</span> python /usr/bin/python3</span></span><br></pre></td></tr></tbody></table></figure>
<p>对于Python 2，输入：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo alternatives --<span class="built_in">set</span> python /usr/bin/python2</span></span><br></pre></td></tr></tbody></table></figure>
<p>Alternatives命令创建一个指向指定python版本的symlink python。</p>
<p>在终端中键入python –version，你应该看到默认的Python版本。</p>
<p>要更改默认版本，请使用上面的命令之一，如果要删除未版本控制的python命令，请输入：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo alternatives --auto python</span></span><br></pre></td></tr></tbody></table></figure>


<p><strong>结论</strong></p>
<p>在CentOS 8操作系统中，默认情况下未安装Python，如果有需要，按照以上方法操作即可。</p>
<p>如果做一个总结的话，那就是：要安装Python 3，请键入dnf install python3，如果是安装python 2，请键入dnf install python2。</p>
<p><a href="https://ywnz.com/linuxjc/6033.html">https://ywnz.com/linuxjc/6033.html</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ</title>
    <url>/2020/04/29/ops/rocketmq/</url>
    <content><![CDATA[<p>生产者发送消息：<br>export NAMESRV_ADDR=127.0.0.1:9876<br>sh tools.sh org.apache.rocketmq.example.quickstart.Producer</p>
<p>消费者接受消息：<br>sh tools.sh org.apache.rocketmq.example.quickstart.Consumer<br>————————————————<br>版权声明：本文为CSDN博主「森雨海巷」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_33767353/java/article/details/103082730">https://blog.csdn.net/qq_33767353/java/article/details/103082730</a></p>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>MQ</tag>
        <tag>services</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 插件开发</title>
    <url>/2020/06/08/plugins/chrome-plugin/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>插件开发</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/06/08/nodejs/npm/</url>
    <content><![CDATA[<p>cnpm</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm adduser --registry http://nexus.domain.cn/repository/npm-hosted/</span><br><span class="line">user: user</span><br><span class="line">password: dev123</span><br><span class="line">email :  dev@domain.com</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></tbody></table></figure>

<h3 id="node-sass-修改地址"><a href="#node-sass-修改地址" class="headerlink" title="node-sass 修改地址"></a>node-sass 修改地址</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass</span><br></pre></td></tr></tbody></table></figure>

<p>Linux 执行命令权限问题，加上参数：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">--unsafe-perm</span><br></pre></td></tr></tbody></table></figure>

]]></content>
  </entry>
  <entry>
    <title>VSCode 插件开发</title>
    <url>/2020/06/08/plugins/vscode-plugin/</url>
    <content><![CDATA[<h2 id="VSCode自定义插件开发"><a href="#VSCode自定义插件开发" class="headerlink" title="VSCode自定义插件开发"></a>VSCode自定义插件开发</h2><h3 id="VSCode插件开发有什么用"><a href="#VSCode插件开发有什么用" class="headerlink" title="VSCode插件开发有什么用"></a>VSCode插件开发有什么用</h3><p>每个公司、项目组、各人都有自己特殊的定制化、可公用的需求，vscode的已有插件显然不能满足我们各种各样的要求，所以开发一个适用于我们自己的定制化插件，无疑能大大提高我们的开发效率以及团队的语法规范</p>
<h3 id="VSCode插件开发、发布主要流程"><a href="#VSCode插件开发、发布主要流程" class="headerlink" title="VSCode插件开发、发布主要流程"></a>VSCode插件开发、发布主要流程</h3><ol>
<li>插件开发前的准备：vscode、nodejs、vscode插件生产工具、git、微软账号</li>
<li>插件开发：插件构思、官方文档查阅</li>
<li>插件发布：打包、上传、插件市场操作</li>
<li>插件维护：更新迭代后打包、上传、插件市场操作</li>
</ol>
<h3 id="插件开发前的准备："><a href="#插件开发前的准备：" class="headerlink" title="插件开发前的准备："></a>插件开发前的准备：</h3><p>vscode、nodejs、git、微软账号<br>vscode插件生产工具：官方推荐使用Yeoman 和 VS Code Extension Generator。用如下命令安装：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g yo generator-code</span><br></pre></td></tr></tbody></table></figure>

<h4 id="使用生产工具初始化代码"><a href="#使用生产工具初始化代码" class="headerlink" title="使用生产工具初始化代码"></a>使用生产工具初始化代码</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">yo code</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>目录如下</li>
</ul>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">├── .vscode      <span class="regexp">//</span> 资源配置文件</span><br><span class="line">├── CHANGELOG.md <span class="regexp">//</span> 更改记录文件，会展示到vscode插件市场</span><br><span class="line">├── extension.js <span class="regexp">//</span> 拓展源代码文件</span><br><span class="line">├── jsconfig.json</span><br><span class="line">├── package.json <span class="regexp">//</span> 资源配置文件</span><br><span class="line">├── README.md    <span class="regexp">//</span> 插件介绍文件，会展示到vscode插件市场</span><br><span class="line">├── test         <span class="regexp">//</span> 测试文件</span><br><span class="line">└── vsc-extension-quickstart.md</span><br></pre></td></tr></tbody></table></figure>

<p>在js拓展项目下，最重要的就是extension.js和package.json。</p>
<h3 id="开发的插件功能"><a href="#开发的插件功能" class="headerlink" title="开发的插件功能"></a>开发的插件功能</h3><ol>
<li>初始化项目的组件模块</li>
<li>初始化项目里面能共用的模块</li>
</ol>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">官方文档</a>   <a href="https://www.yuque.com/chengkuan/web/yr5r7u?language=en-us">Bugs</a></p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Make sure you have <a href="https://nodejs.org/">Node.js</a> installed. Then run:</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g vsce</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>You can use <code>vsce</code> to easily <a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension#packaging-extensions">package</a> and <a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension#publishing-extensions">publish</a> your extensions:</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> myExtension</span><br><span class="line"><span class="variable">$</span> vsce package</span><br><span class="line"><span class="comment"># myExtension.vsix generated</span></span><br><span class="line"><span class="variable">$</span> vsce publish</span><br><span class="line"><span class="comment"># &lt;publisherID&gt;.myExtension published to VS Code MarketPlace</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>插件开发</category>
      </categories>
      <tags>
        <tag>plugin</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle 插件开发</title>
    <url>/2020/06/08/plugins/gradle-plugin/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>插件开发</category>
      </categories>
      <tags>
        <tag>plugin</tag>
        <tag>gradle</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/06/10/redis/redis-script/</url>
    <content><![CDATA[<p>redis-script</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/06/16/typescript/android/</url>
    <content><![CDATA[<p>安装ndk</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sdkmanager <span class="string">'ndk;21.2.6472646'</span></span><br></pre></td></tr></tbody></table></figure>

<p>二、安装android-sdk<br>1.下载sdk-tools-linux-4333796.zip</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@CentOS-Master share]<span class="comment"># wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip</span></span><br><span class="line">[root@CentOS-Master share]<span class="comment"># unzip sdk-tools-linux-4333796.zip -d android-sdk</span></span><br><span class="line">[root@CentOS-Master share]<span class="comment"># cd android-sdk</span></span><br><span class="line">[root@CentOS-Master android-sdk]<span class="comment"># ls</span></span><br><span class="line"> tools</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>2.配置android环境变量</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@CentOS-Master android-sdk]<span class="comment"># vim /etc/profile</span></span><br></pre></td></tr></tbody></table></figure>



<p>输入然后保存</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=<span class="string">"/usr/share/android-sdk"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/tools/bin:<span class="variable">$ANDROID_HOME</span>/platform-tools:<span class="variable">$PATH</span>"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>保存配置，重新刷新配置</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@CentOS-Master android-sdk]<span class="comment"># source profile</span></span><br></pre></td></tr></tbody></table></figure>

<p>安装build-tools，platform-tools，platforms的25.0.2版本<br>首先运行：sdkmanager –list</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@CentOS-Master android-sdk]<span class="comment"># sdkmanager --list</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sdkmanager <span class="string">"build-tools;29.0.3"</span> <span class="string">"platforms;android-29"</span> <span class="string">"ndk-bundle"</span> <span class="string">"extras;android;m2repository"</span> <span class="string">"extras;google;m2repository"</span> <span class="string">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2"</span> <span class="string">"tools"</span></span><br></pre></td></tr></tbody></table></figure>


<p>三、安装JDK<br>下载压缩包并配置环境变量</p>
<p>保存配置，重新刷新配置</p>
<figure class="highlight profile"><table><tbody><tr><td class="code"><pre><span class="line">export GRADLE_USER_HOME=/data/.libs/gradle</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/data/services/jdk/<span class="number">11.0</span><span class="number">.5</span></span><br><span class="line">export MAVEN_HOME=/data/services/maven/<span class="number">3.6</span><span class="number">.3</span></span><br><span class="line">export GRADLE_HOME=/data/services/gradle/<span class="number">6.3</span></span><br><span class="line"></span><br><span class="line">export ANDROID_HOME=/data/services/android</span><br><span class="line"></span><br><span class="line">export NODE_HOME=/data/services/nodejs/v12.16.2</span><br><span class="line">export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib</span><br><span class="line"></span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$MAVEN_HOME/bin:$GRADLE_HOME/bin:$NODE_HOME/bin:$PATH</span><br><span class="line">export PATH=$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH</span><br></pre></td></tr></tbody></table></figure>



<p>[root@CentOS-Master android-sdk]# source profile<br>1<br>四、安装Gradle<br>1.下载Gradle-4.6.all.zip包</p>
<p>[root@CentOS-Master /]# cd /usr/share<br>[root@CentOS-Master share]# wget <a href="https://downloads.gradle.org/distributions/gradle-4.6-all.zip">https://downloads.gradle.org/distributions/gradle-4.6-all.zip</a><br>1<br>2<br>2.解压</p>
<p>unzip -D gradle-4.6-all.zip<br>1<br>3.配置环境变量</p>
<p>[root@CentOS-Master android-sdk]# vim /etc/profile<br>1<br>输入然后保存</p>
<p>export GRADLE_HOME=/usr/share/gradle-4.6<br>export PATH=$PATH:$GRADLE_HOME/bin<br>1<br>2<br>保存配置，重新刷新配置</p>
<p>[root@CentOS-Master android-sdk]# source profile<br>1<br>五、使用Jenkins配置打包Android工程<br>系统管理-系统设置， 添加ANDROID_HOME</p>
<p>系统设置-全局工具配置， 添加SDK，Gradle</p>
<p>2.创建任务, 输入任务名称，选择自由风格的软件项目</p>
<p>构建参数</p>
<p>参数化构建过程，我们可以增加一些参数来控制自己的项目的构建，这里对应的变量是工程下面的gradle.properties里面定义的，然后build.gradle脚本会采用这里配置的去动态构建工程，注意一定要与properties文件中一一对应。<br>如果没有安装Git Parameter 插件，先到系统管理–插件管理安装</p>
<p>源码管理<br>这个tab下面主要就是用来指定源码存放位置的</p>
<p>构建，选择use gradle wrapper ， 填写Tasks<br>clean<br>assemble$BUILD_TYPE<br>1<br>2<br>点开高级：Pass all job parameters as Project properties，一定要勾选这个选项，代表把你上面的那些参数用来当作gradle构建参数，否则的话是不会起作用的。<br>6.构建后操作，输出文件</p>
<p>————————————————<br>版权声明：本文为CSDN博主「朱建伟」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weijizhu1000/java/article/details/95752438">https://blog.csdn.net/weijizhu1000/java/article/details/95752438</a></p>
]]></content>
  </entry>
  <entry>
    <title>typescript 提示</title>
    <url>/2020/06/14/typescript/d.ts/</url>
    <content><![CDATA[<p>【转】<a href="https://github.com/coppyC/blog/issues/6">https://github.com/coppyC/blog/issues/6</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么vue中有的文件中的函数不能提示，转到定义提示没有任何定义，而有的文件又正常工作</p>
<ul>
<li><p>从第三方库增强提示 （例如 <code>this.$axios</code>）</p>
</li>
<li><p>从已写的代码增强提示 （例如 <code>this.$store</code>）</p>
</li>
</ul>
<h2 id="新手教程"><a href="#新手教程" class="headerlink" title="新手教程"></a>新手教程</h2><p>  先来个官网教程小改版本。</p>
<p>  在根目录新建 <code>global.d.ts</code> 文件，然后加入下面代码</p>
  <figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">'vue/types/vue'</span> {</span><br><span class="line">  <span class="comment">// 声明原型链属性: `this.x`</span></span><br><span class="line">  <span class="keyword">interface</span> Vue {</span><br><span class="line">    xx: <span class="built_in">string</span></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 声明全局属性: `Vue.xx`</span></span><br><span class="line">  <span class="keyword">interface</span> VueConstructor {</span><br><span class="line">    oo: <span class="built_in">string</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明选项属性: `export default { xxx: '' }`</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">'vue/types/options'</span> {</span><br><span class="line">  <span class="keyword">interface</span> ComponentOptions&lt;V <span class="keyword">extends</span> Vue&gt; {</span><br><span class="line">    www?: <span class="built_in">string</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>对的，你没有看错，我没有在 data 声明 xx，提示里面却有 xx，<br><code>Vue.oo</code> 也有提示，Vue选项的 <code>ww</code> 也能得到提示。</p>
<p>（如果没有提示，需要重启一下 vscode，用js的话可能还需要添加 jsconfig.json 文件）</p>
<p>在 vscode 中增强 Vue 的提示无非就是这三种途径。</p>
<h2 id="番外-typescript-声明文件了解一下"><a href="#番外-typescript-声明文件了解一下" class="headerlink" title="[番外] typescript 声明文件了解一下"></a>[番外] typescript 声明文件了解一下</h2><p>typescript 作为 vscode 的亲儿子，只要掌握之后，在 vscode 中写 js、ts 确实是能提升幸福度。</p>
<p>而本文也不可能让大家马上精通 typescript，只能说说上面的代码。</p>
<p>其实通过图片效果，大家也都了解得差不多了，而且我也打了注释，应该都能看懂，需要注意的可能就是，声明vue选项(即<code>interface ComponentOptions</code>)的时候，要记得加上 <code>?</code> 来表示这是一个可选属性，不然会变成必填属性，然后提示可能会泡汤。</p>
<p>然后注释使用 <code>/** */</code> 这种注释，不要使用这种 <code>//</code> ，这样的话提示会显示注释</p>
<p>然后就是typescript 剩下的就要自己去学了，我只能带到这里了。</p>
<p>如果是解决 mpvue 提示的话，我这里写了一个包放在 github 上开源了。</p>
<p>可以参考一下。 <a href="https://github.com/coppyC/types/tree/mpvue">https://github.com/coppyC/types/tree/mpvue</a></p>
<p>也欢迎安装使用 <code>yarn add -D coppyc/types#mpvue</code></p>
<p>效果还是很 nice 的</p>
<h1 id="增强-this-store-提示"><a href="#增强-this-store-提示" class="headerlink" title="增强 this.$store 提示"></a>增强 <code>this.$store 提示</code></h1><p>但是你上面那样加一些无意义的提示是没用的，我们先来解决最常见的一个问题<code>this.$store</code>提示</p>
<p><code>$store</code> 是 访问 Vuex 的一个常用途径，虽然我们可以通过导入 store 文件来引用，而不是<code>$store</code> 来引用来获得提示，但这似乎不是什么最佳选择，毕竟官方给了这个渠道，不用感觉就亏了。</p>
<p>好，现在打个比方，我们有这么个 store.js 文件</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex, { Store } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  <span class="keyword">new</span> Store({</span><br><span class="line">  state: {</span><br><span class="line">    user: {},     <span class="comment">//用户</span></span><br><span class="line">    sign: {},     <span class="comment">//签到</span></span><br><span class="line">    wallet: {}    <span class="comment">//积分</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>然后在 global.d.ts 中这么搞</p>
<figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'vuex/types/vue'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./src/store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">'vue/types/vue'</span> {</span><br><span class="line">  <span class="keyword">interface</span> Vue {</span><br><span class="line">    $store: <span class="keyword">typeof</span> store</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>注意是 <code>typeof store</code> 不是 <code>store</code></p>
<p>看一下效果，打开，还是和原来一样，重启，还是一样，没变化</p>
<p>原因是 vuex 中已经定义过 $store 了，而且还不能覆盖，官网是这么说的</p>
<blockquote>
<p>接口的非函数的成员应该是唯一的。如果它们不是唯一的，那么它们必须是相同的类型。如果两个接口中同时声明了同名的非函数成员且它们的类型不同，则编译器会报错。</p>
</blockquote>
<p>这个就很难搞了，我目前只有一个临时解决方案，按住 control (mac:command)，然后点击</p>
<p><a href="https://user-images.githubusercontent.com/25004510/59961624-c9d77e80-950c-11e9-9fc5-f0db9468d83c.png"><img data-src="https://user-images.githubusercontent.com/25004510/59961624-c9d77e80-950c-11e9-9fc5-f0db9468d83c.png" alt="Screen Shot 2019-06-22 at 4 41 29 PM"></a></p>
<p>然后跳转到 vuex 的 vue.d.ts 声明文件 把 16 行 （<code>$store: Store&lt;any&gt;;</code>）这一行注释掉</p>
<p>重启一下 vscode，然后看下效果</p>
<p><a href="https://user-images.githubusercontent.com/25004510/59961709-f5a73400-950d-11e9-9b2f-30fa9076abea.png"><img data-src="https://user-images.githubusercontent.com/25004510/59961709-f5a73400-950d-11e9-9b2f-30fa9076abea.png" alt="image"></a></p>
<p>还不错，就是有个缺点，npm 的包重新装的话，我们刚才在 vuex 的声明文件改的东西就会被改回去，这个也是没有办法，毕竟是临时工方案，如果你有更好的方案，可以告诉我</p>
<p>或者你用 ts 而不是 js 的话，就可以用 as 大法来断言，不用这么折腾。</p>
<h1 id="从第三方库中-增强提示"><a href="#从第三方库中-增强提示" class="headerlink" title="从第三方库中 增强提示"></a>从第三方库中 增强提示</h1><p>上面说的都是自己写的代码，如果是别人写的呢? 从 npm 安装的呢？别急。</p>
<p>不知什么时候，<code>this.$http</code> 这种网络请求方式就开始流行起来（可能是 angular 中开始的吧）</p>
<p>然后 vue 本身是没有提供 ajax 的封闭的，比较流行的就是 axios，但是每次都 import 进来的话，还是比较麻烦的，很多人喜欢通过 <code>Vue.prototype.$http = axios</code> 来修改原型链，然后用<code>this.$http</code>这样一个便捷方式来访问，这样一个人还好，不同人维护的话，在原型链中挂了各种这样不同的东西，还是很难维护的，想一下，你在原型上挂点什么，下一个人不知道，然后也挂点什么，然后可能冲突出 bug。这也一直被 react 用户吐嘈，还是 vue 做大型项目难以维护的一个地方。</p>
<p>但是现在，我们可以用维护性十分强的 typescript 声明文件来避免这个问题，增加提示</p>
<p>就用 axios 来做例子吧</p>
<p>先挂上原型中 <code>Vue.prototype.$http = axios</code></p>
<p>然后在 global.d.ts 中写点什么。</p>
<figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">'vue/types/vue'</span> {</span><br><span class="line">  <span class="keyword">interface</span> Vue {</span><br><span class="line">    $http: <span class="keyword">typeof</span> axios</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>嗯 ，就是这么简单，记得是 <code>typeof axios</code> ，不是 <code>axios</code></p>
<p>当然了，这个库是要支持 typescript 的才行</p>
<p>看一下效果</p>
<p><a href="https://user-images.githubusercontent.com/25004510/59961497-1de16380-950b-11e9-8a73-9e389fe79d3a.png"><img data-src="https://user-images.githubusercontent.com/25004510/59961497-1de16380-950b-11e9-8a73-9e389fe79d3a.png" alt="image"></a></p>
<p>嗯，还不错</p>
<h1 id="完"><a href="#完" class="headerlink" title="完"></a>完</h1><p>差不多就这样了，有缘再见吧。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/06/08/plugins/vscode/vscode-package/</url>
    <content><![CDATA[<h1 id="vscode打包问题"><a href="#vscode打包问题" class="headerlink" title="vscode打包问题"></a>vscode打包问题</h1><h2 id="打包过程报错"><a href="#打包过程报错" class="headerlink" title="打包过程报错"></a>打包过程报错</h2><ol>
<li>npm list错误</li>
</ol>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">npm</span> run package</span><br><span class="line"></span><br><span class="line"><span class="attribute">Error</span>: Command failed: npm list --production --parseable --depth=<span class="number">99999</span>`</span><br><span class="line"></span><br><span class="line"><span class="attribute">peer</span> dep missing: webpack@^<span class="number">2</span>.<span class="number">0</span>.<span class="number">0</span> || ^<span class="number">3</span>.<span class="number">0</span>.<span class="number">0</span> || ^<span class="number">4</span>.<span class="number">0</span>.<span class="number">0</span>, required by less-loader@<span class="number">4</span>.<span class="number">1</span>.<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>



<ol>
<li>max buffer问题</li>
</ol>
<figure class="highlight subunit"><table><tbody><tr><td class="code"><pre><span class="line">npm run package</span><br><span class="line"></span><br><span class="line"><span class="keyword">Error: </span>stdout maxBuffer exceeded</span><br></pre></td></tr></tbody></table></figure>



<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>选用yarn执行<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vsce package --yarn</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<ol start="2">
<li>解决npm list错误</li>
</ol>
<p><a href="https://github.com/Microsoft/vscode-vsce/issues/246">https://github.com/Microsoft/vscode-vsce/issues/246</a> vscode内的方案</p>
<p><a href="https://github.com/npm/npm/issues/19393">https://github.com/npm/npm/issues/19393</a> npmlist的错误issue</p>
<figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line">yarn install <span class="params">--ignore-engines</span> <span class="params">--registry=http</span>:<span class="string">//registry.npm.alibaba-inc.com</span></span><br><span class="line">npm run postinstall</span><br><span class="line">npm run package -&gt; <span class="string">//</span> vsce package <span class="params">--yarn</span> 在list时，会选用yarn执行</span><br></pre></td></tr></tbody></table></figure>



<ol start="3">
<li>max buffer问题</li>
</ol>
<p>因为依赖的npm包太多了，使用exec执行时，超过了stdout的buffer</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> vsce out/npm.js</span><br><span class="line"><span class="regexp">//</span> fn getYarnProductionDependencies</span><br><span class="line"></span><br><span class="line">cp.exec(<span class="string">'yarn list --json'</span>, { cwd: cwd,  maxBuffer: <span class="number">5000</span> * <span class="number">1024</span> , encoding: <span class="string">'utf8'</span>, env: __assign({}, process.env, { NODE_ENV: <span class="string">'production'</span> }) </span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 加上了一句，maxBuffer: <span class="number">5000</span> * <span class="number">1024</span>的配置</span><br></pre></td></tr></tbody></table></figure>



<h2 id="为什么执行npm-list"><a href="#为什么执行npm-list" class="headerlink" title="为什么执行npm list"></a>为什么执行npm list</h2><p>为什么执行，以及npm list为什么这么多报错</p>
<p>运行时是没有任何问题的</p>
<h2 id="npm-list报错"><a href="#npm-list报错" class="headerlink" title="npm list报错"></a>npm list报错</h2><p><code>npm list --production --parseable --depth=99999</code> 这个命令，导致各种奇葩的报错</p>
<ol>
<li>missing</li>
</ol>
<p>这两个是未带版本号的</p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">Error</span>: Command failed: npm list --production --parseable --depth=<span class="number">99999</span></span><br><span class="line"><span class="attribute">npm</span> ERR! peer dep missing: webpack@^<span class="number">2</span>.<span class="number">0</span>.<span class="number">0</span> || ^<span class="number">3</span>.<span class="number">0</span>.<span class="number">0</span> || ^<span class="number">4</span>.<span class="number">0</span>.<span class="number">0</span>, required by less-loader@<span class="number">4</span>.<span class="number">1</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">npm</span> ERR! missing: mkdirp@, required by kissy-xtemplate@<span class="number">0</span>.<span class="number">4</span>.<span class="number">3</span></span><br><span class="line"><span class="attribute">npm</span> ERR! missing: lodash@, required by kissy-xtemplate@<span class="number">0</span>.<span class="number">4</span>.<span class="number">3</span></span><br><span class="line"><span class="attribute">npm</span> ERR! missing: commander@, required by kissy-xtemplate@<span class="number">0</span>.<span class="number">4</span>.<span class="number">3</span></span><br><span class="line"><span class="attribute">npm</span> ERR! missing: async@, required by wmic@<span class="number">0</span>.<span class="number">0</span>.<span class="number">7</span></span><br></pre></td></tr></tbody></table></figure>



<ol>
<li>externous</li>
</ol>
<p>怎么理解？安装但是为写入 <code>package.json</code> ，但是我是全删除了，重新 <code>tnpm install</code> 的。</p>
<ol>
<li></li>
</ol>
<h2 id="yarn打包没有版本号"><a href="#yarn打包没有版本号" class="headerlink" title="yarn打包没有版本号"></a>yarn打包没有版本号</h2><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">kissy</span>-xtemplate@~<span class="number">0</span>.<span class="number">4</span>.<span class="number">3</span>:</span><br><span class="line">  <span class="attribute">version</span> <span class="string">"0.4.3"</span></span><br><span class="line">  <span class="attribute">resolved</span> <span class="string">"http://registry.npm.alibaba-inc.com/kissy-xtemplate/download/kissy-xtemplate-0.4.3.tgz#f6f682b1531e8a66002eea265458330ad3dc92ab"</span></span><br><span class="line">  <span class="attribute">integrity</span> sha<span class="number">1</span>-<span class="number">9</span>vaCsVMeimYALuomVFgzCtPckqs=</span><br><span class="line">  <span class="attribute">dependencies</span>:</span><br><span class="line">    <span class="attribute">colors</span> <span class="string">"&gt;=0.6.0-1"</span></span><br><span class="line">    <span class="attribute">commander</span> <span class="string">""</span></span><br><span class="line">    <span class="attribute">escodegen</span> <span class="string">"~1.3.2"</span></span><br><span class="line">    <span class="attribute">esprima</span> <span class="string">"~1.1.1"</span></span><br><span class="line">    <span class="attribute">event</span>-stream <span class="string">"~3.1.1"</span></span><br><span class="line">    <span class="attribute">iconv</span>-lite <span class="string">"&gt;=0.1.0"</span></span><br><span class="line">    <span class="attribute">js</span>-beautify <span class="string">"~1.4.0"</span></span><br><span class="line">    <span class="attribute">lodash</span> <span class="string">""</span></span><br><span class="line">    <span class="attribute">logger</span>-manager <span class="string">"*"</span></span><br><span class="line">    <span class="attribute">mkdirp</span> <span class="string">""</span></span><br><span class="line">    <span class="attribute">node</span>.extend <span class="string">"~1.0.10"</span></span><br></pre></td></tr></tbody></table></figure>



<p>这是包写的不规范吧？</p>
<figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: {</span><br><span class="line"></span><br><span class="line">    <span class="string">"mkdirp"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"lodash"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"commander"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="yarn和npm打包目录结构"><a href="#yarn和npm打包目录结构" class="headerlink" title="yarn和npm打包目录结构"></a>yarn和npm打包目录结构</h2><ul>
<li>yarn是树型，非扁平的结构</li>
</ul>
<ul>
<li>npm是扁平的结构，通过软链接的形式</li>
</ul>
<ul>
<li>tnpm呢？又一种新的</li>
</ul>
<h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><h3 id="一-这个错误从哪里来的？"><a href="#一-这个错误从哪里来的？" class="headerlink" title="一 这个错误从哪里来的？"></a>一 这个错误从哪里来的？</h3><h3 id="二-这个错误的含义是什么？"><a href="#二-这个错误的含义是什么？" class="headerlink" title="二 这个错误的含义是什么？"></a>二 这个错误的含义是什么？</h3><h3 id="三-为什么会报错，问题时什么"><a href="#三-为什么会报错，问题时什么" class="headerlink" title="三 为什么会报错，问题时什么"></a>三 为什么会报错，问题时什么</h3><h3 id="四-如何解决这个问题？"><a href="#四-如何解决这个问题？" class="headerlink" title="四 如何解决这个问题？"></a>四 如何解决这个问题？</h3><figure class="highlight actionscript"><table><tbody><tr><td class="code"><pre><span class="line">vsce <span class="class"><span class="keyword">package</span></span></span><br></pre></td></tr></tbody></table></figure>



<figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">vscode:</span>prepublish: tsc -p ./</span><br></pre></td></tr></tbody></table></figure>



<p>Npm需要深入理解了，这玩意做的太崩溃了</p>
<p>不要着急，各种乱试，注意力集中在发声错误，以及错误的原因上。</p>
<ul>
<li><code>npm list --production --parseable --depth=99999</code> 执行这句，为什么会报错呢？这句命令作用是什么？怎么解决？</li>
</ul>
<p><a href="https://github.com/Microsoft/vscode-vsce/issues/246">Have NPM as a runtime dependency · Issue #246 · Microsoft/vscode-vsce · GitHub</a></p>
<p><a href="https://github.com/npm/npm/issues/19393">https://github.com/npm/npm/issues/19393</a> 这个完全解释了错误的原因<code>optional dependencies</code></p>
<p><a href="https://github.com/Microsoft/vscode-vsce/issues/52">https://github.com/Microsoft/vscode-vsce/issues/52</a> npm list的问题</p>
<ul>
<li>vscode打包时报错</li>
</ul>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">修改以下两部分</span><br><span class="line"><span class="regexp">//</span> yarn install --ignore-engines --registry=http:<span class="regexp">//</span>registry.npm.alibaba-inc.com</span><br><span class="line"><span class="regexp">//</span> vsce package --yarn</span><br></pre></td></tr></tbody></table></figure>



<ul>
<li><p>extraneous是什么，为什么<code>npm list</code>执行上面的报extraneous错误什么意思？</p>
</li>
<li><p><code>optional dependencies</code> 这是什么？</p>
</li>
<li><p>为什么yarn安装的，很多都没有package.json文件呢？</p>
</li>
</ul>
<p>Yarn安装的文件结构怎么那么乖？</p>
<ul>
<li>tnpm安装的文件夹结构</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Redis 安装使用</title>
    <url>/2020/07/22/sql/date/date/</url>
    <content><![CDATA[<h1 id="查询交集"><a href="#查询交集" class="headerlink" title="查询交集"></a>查询交集</h1><figure class="highlight brainfuck"><table><tbody><tr><td class="code"><pre><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">A</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line">    <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">B1</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>           <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">B2</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>               <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">B3</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>               <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">B4</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>               <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">B5</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>                      <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">B6</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">A</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line">                      <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">B7</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>                      <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">B8</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>                         <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">B9</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>                         <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">B10</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>                         <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">B11</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>                                      <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">B12</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>                                         <span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">B13</span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">|</span></span><br><span class="line"><span class="comment"></span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">A</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">(StartDate1</span> &lt;<span class="comment">=</span> <span class="comment">EndDate2)</span> <span class="comment">and</span> <span class="comment">(StartDate2</span> &lt;<span class="comment">=</span> <span class="comment">EndDate1)</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>service</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/04/03/linux/centos/centos7/kai-ji-qi-dong/</url>
    <content><![CDATA[<p>vim /lib/systemd/system/xx.service</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=dflc start up</span><br><span class="line"><span class="attr">After</span>=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">ExecStart</span>=/user/jar/xx-start.sh</span><br><span class="line"><span class="attr">KillSignal</span>=SIGQUIT</span><br><span class="line"><span class="attr">TimeoutStopSec</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">KillMode</span>=process</span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#3、设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> xx</span><br><span class="line"><span class="comment">#4、取消开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> xx</span><br><span class="line"><span class="comment">#5、启动项目</span></span><br><span class="line">systemctl start xx</span><br><span class="line"><span class="comment">#5、查看启动状态日志</span></span><br><span class="line">journalctl -xe</span><br><span class="line"><span class="comment">#6、停止运行的项目</span></span><br><span class="line">systemctl <span class="built_in">kill</span> xx（因为上面只配置了killsignal）</span><br></pre></td></tr></tbody></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Redis 安装使用</title>
    <url>/2020/04/29/redis/redis/</url>
    <content><![CDATA[<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p><a href="https://www.redis.net.cn/">文档</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span>  </span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/etc/redis.conf</span> <span class="comment"># 启动redis命令</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span> <span class="comment"># 设置容器时区与宿主机保持一致</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis.conf:/etc/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/logs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"6379:6379"</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>conf/redis.conf</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Redis配置文件样例</span><br><span class="line"></span><br><span class="line"># Note on units: when memory size is needed, it is possible to specifiy</span><br><span class="line"># it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="line">#</span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br><span class="line"></span><br><span class="line"># Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span><br><span class="line"># 启用守护进程后，Redis会把pid写到一个pidfile中，在/var/run/redis.pid</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"># 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line"># 指定Redis监听端口，默认端口为6379</span><br><span class="line"># 如果指定0端口，表示Redis不监听TCP连接</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># 绑定的主机地址</span><br><span class="line"># 你可以绑定单一接口，如果没有绑定，所有接口都会监听到来的连接</span><br><span class="line"># bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># Specify the path for the unix socket that will be used to listen for</span><br><span class="line"># incoming connections. There is no default, so Redis will not listen</span><br><span class="line"># on a unix socket when not specified.</span><br><span class="line">#</span><br><span class="line"># unixsocket /tmp/redis.sock</span><br><span class="line"># unixsocketperm 755</span><br><span class="line"></span><br><span class="line"># 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"># 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span><br><span class="line"># debug (很多信息, 对开发／测试比较有用)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably)</span><br><span class="line"># warning (only very important / critical messages are logged)</span><br><span class="line">loglevel verbose</span><br><span class="line"></span><br><span class="line"># 日志记录方式，默认为标准输出，如果配置为redis为守护进程方式运行，而这里又配置为标准输出，则日志将会发送给/dev/null</span><br><span class="line">logfile /logs/redis.log</span><br><span class="line"></span><br><span class="line"># To enable logging to the system logger, just set 'syslog-enabled' to yes,</span><br><span class="line"># and optionally update the other syslog parameters to suit your needs.</span><br><span class="line"># syslog-enabled no</span><br><span class="line"></span><br><span class="line"># Specify the syslog identity.</span><br><span class="line"># syslog-ident redis</span><br><span class="line"></span><br><span class="line"># Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.</span><br><span class="line"># syslog-facility local0</span><br><span class="line"></span><br><span class="line"># 设置数据库的数量，默认数据库为0，可以使用select &lt;dbid&gt;命令在连接上指定数据库id</span><br><span class="line"># dbid是从0到‘databases’-1的数目</span><br><span class="line">databases 64 </span><br><span class="line"></span><br><span class="line">################################ SNAPSHOTTING  #################################</span><br><span class="line"># 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line"># Save the DB on disk:</span><br><span class="line">#</span><br><span class="line">#   save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line">#</span><br><span class="line">#   Will save the DB if both the given number of seconds and the given</span><br><span class="line">#   number of write operations against the DB occurred.</span><br><span class="line">#</span><br><span class="line">#   满足以下条件将会同步数据:</span><br><span class="line">#   900秒（15分钟）内有1个更改</span><br><span class="line">#   300秒（5分钟）内有10个更改</span><br><span class="line">#   60秒内有10000个更改</span><br><span class="line">#   Note: 可以把所有“save”行注释掉，这样就取消同步操作了</span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"># 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># 指定本地数据库文件名，默认值为dump.rdb</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># 工作目录.</span><br><span class="line"># 指定本地数据库存放目录，文件名由上一个dbfilename配置项指定</span><br><span class="line">#</span><br><span class="line"># Also the Append Only File will be created inside this directory.</span><br><span class="line">#</span><br><span class="line"># 注意，这里只能指定一个目录，不能指定文件名</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line">################################# REPLICATION #################################</span><br><span class="line"></span><br><span class="line"># 主从复制。使用slaveof从 Redis服务器复制一个Redis实例。注意，该配置仅限于当前slave有效</span><br><span class="line"># so for example it is possible to configure the slave to save the DB with a</span><br><span class="line"># different interval, or to listen to another port, and so on.</span><br><span class="line"># 设置当本机为slav服务时，设置master服务的ip地址及端口，在Redis启动时，它会自动从master进行数据同步</span><br><span class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当master服务设置了密码保护时，slav服务连接master的密码</span><br><span class="line"># 下文的“requirepass”配置项可以指定密码</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line"># When a slave lost the connection with the master, or when the replication</span><br><span class="line"># is still in progress, the slave can act in two different ways:</span><br><span class="line">#</span><br><span class="line"># 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will</span><br><span class="line">#    still reply to client requests, possibly with out of data data, or the</span><br><span class="line">#    data set may just be empty if this is the first synchronization.</span><br><span class="line">#</span><br><span class="line"># 2) if slave-serve-stale data is set to 'no' the slave will reply with</span><br><span class="line">#    an error "SYNC with master in progress" to all the kind of commands</span><br><span class="line">#    but to INFO and SLAVEOF.</span><br><span class="line">#</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"># Slaves send PINGs to server in a predefined interval. It's possible to change</span><br><span class="line"># this interval with the repl_ping_slave_period option. The default value is 10</span><br><span class="line"># seconds.</span><br><span class="line">#</span><br><span class="line"># repl-ping-slave-period 10</span><br><span class="line"></span><br><span class="line"># The following option sets a timeout for both Bulk transfer I/O timeout and</span><br><span class="line"># master data or ping response timeout. The default value is 60 seconds.</span><br><span class="line">#</span><br><span class="line"># It is important to make sure that this value is greater than the value</span><br><span class="line"># specified for repl-ping-slave-period otherwise a timeout will be detected</span><br><span class="line"># every time there is low traffic between the master and the slave.</span><br><span class="line">#</span><br><span class="line"># repl-timeout 60</span><br><span class="line"></span><br><span class="line">################################## SECURITY ###################################</span><br><span class="line"></span><br><span class="line"># Warning: since Redis is pretty fast an outside user can try up to</span><br><span class="line"># 150k passwords per second against a good box. This means that you should</span><br><span class="line"># use a very strong password otherwise it will be very easy to break.</span><br><span class="line"># 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过auth &lt;password&gt;命令提供密码，默认关闭</span><br><span class="line">requirepass foo</span><br><span class="line"># Command renaming.</span><br><span class="line">#</span><br><span class="line"># It is possilbe to change the name of dangerous commands in a shared</span><br><span class="line"># environment. For instance the CONFIG command may be renamed into something</span><br><span class="line"># of hard to guess so that it will be still available for internal-use</span><br><span class="line"># tools but not available for general clients.</span><br><span class="line">#</span><br><span class="line"># Example:</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="line">#</span><br><span class="line"># It is also possilbe to completely kill a command renaming it into</span><br><span class="line"># an empty string:</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG ""</span><br><span class="line"></span><br><span class="line">################################### LIMITS ####################################</span><br><span class="line"></span><br><span class="line"># 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</span><br><span class="line"># 如果设置maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max Number of clients reached错误信息</span><br><span class="line"># maxclients 128</span><br><span class="line"></span><br><span class="line"># Don't use more memory than the specified amount of bytes.</span><br><span class="line"># When the memory limit is reached Redis will try to remove keys with an</span><br><span class="line"># EXPIRE set. It will try to start freeing keys that are going to expire</span><br><span class="line"># in little time and preserve keys with a longer time to live.</span><br><span class="line"># Redis will also try to remove objects from free lists if possible.</span><br><span class="line">#</span><br><span class="line"># If all this fails, Redis will start to reply with errors to commands</span><br><span class="line"># that will use more memory, like SET, LPUSH, and so on, and will continue</span><br><span class="line"># to reply to most read-only commands like GET.</span><br><span class="line">#</span><br><span class="line"># WARNING: maxmemory can be a good idea mainly if you want to use Redis as a</span><br><span class="line"># 'state' server or cache, not as a real DB. When Redis is used as a real</span><br><span class="line"># database the memory usage will grow over the weeks, it will be obvious if</span><br><span class="line"># it is going to use too much memory in the long run, and you'll have the time</span><br><span class="line"># to upgrade. With maxmemory after the limit is reached you'll start to get</span><br><span class="line"># errors for write operations, and this may even lead to DB inconsistency.</span><br><span class="line"># 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，</span><br><span class="line"># 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。</span><br><span class="line"># Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><span class="line"># is reached? You can select among five behavior:</span><br><span class="line">#</span><br><span class="line"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</span><br><span class="line"># allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</span><br><span class="line"># volatile-random -&gt; remove a random key with an expire set</span><br><span class="line"># allkeys-&gt;random -&gt; remove a random key, any key</span><br><span class="line"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</span><br><span class="line"># noeviction -&gt; don't expire at all, just return an error on write operations</span><br><span class="line">#</span><br><span class="line"># Note: with all the kind of policies, Redis will return an error on write</span><br><span class="line">#       operations, when there are not suitable keys for eviction.</span><br><span class="line">#</span><br><span class="line">#       At the date of writing this commands are: set setnx setex append</span><br><span class="line">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><br><span class="line">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><br><span class="line">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><br><span class="line">#       getset mset msetnx exec sort</span><br><span class="line">#</span><br><span class="line"># The default is:</span><br><span class="line">#</span><br><span class="line"># maxmemory-policy volatile-lru</span><br><span class="line"></span><br><span class="line"># LRU and minimal TTL algorithms are not precise algorithms but approximated</span><br><span class="line"># algorithms (in order to save memory), so you can select as well the sample</span><br><span class="line"># size to check. For instance for default Redis will check three keys and</span><br><span class="line"># pick the one that was used less recently, you can change the sample size</span><br><span class="line"># using the following configuration directive.</span><br><span class="line">#</span><br><span class="line"># maxmemory-samples 3</span><br><span class="line"></span><br><span class="line">############################## APPEND ONLY MODE ###############################</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Note that you can have both the async dumps and the append only file if you</span><br><span class="line"># like (you have to comment the "save" statements above to disable the dumps).</span><br><span class="line"># Still if append only mode is enabled Redis will load the data from the</span><br><span class="line"># log file at startup ignoring the dump.rdb file.</span><br><span class="line"># 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</span><br><span class="line"># 因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span><br><span class="line"># IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append</span><br><span class="line"># log file in background when it gets too big.</span><br><span class="line"></span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># 指定更新日志文件名，默认为appendonly.aof</span><br><span class="line"># appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line"># The fsync() call tells the Operating System to actually write data on disk</span><br><span class="line"># instead to wait for more data in the output buffer. Some OS will really flush</span><br><span class="line"># data on disk, some other OS will just try to do it ASAP.</span><br><span class="line"></span><br><span class="line"># 指定更新日志条件，共有3个可选值：</span><br><span class="line"># no:表示等操作系统进行数据缓存同步到磁盘（快）</span><br><span class="line"># always:表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span><br><span class="line"># everysec:表示每秒同步一次（折衷，默认值）</span><br><span class="line"></span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"># When the AOF fsync policy is set to always or everysec, and a background</span><br><span class="line"># saving process (a background save or AOF log background rewriting) is</span><br><span class="line"># performing a lot of I/O against the disk, in some Linux configurations</span><br><span class="line"># Redis may block too long on the fsync() call. Note that there is no fix for</span><br><span class="line"># this currently, as even performing fsync in a different thread will block</span><br><span class="line"># our synchronous write(2) call.</span><br><span class="line">#</span><br><span class="line"># In order to mitigate this problem it's possible to use the following option</span><br><span class="line"># that will prevent fsync() from being called in the main process while a</span><br><span class="line"># BGSAVE or BGREWRITEAOF is in progress.</span><br><span class="line">#</span><br><span class="line"># This means that while another child is saving the durability of Redis is</span><br><span class="line"># the same as "appendfsync none", that in pratical terms means that it is</span><br><span class="line"># possible to lost up to 30 seconds of log in the worst scenario (with the</span><br><span class="line"># default Linux settings).</span><br><span class="line">#</span><br><span class="line"># If you have latency problems turn this to "yes". Otherwise leave it as</span><br><span class="line"># "no" that is the safest pick from the point of view of durability.</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># Automatic rewrite of the append only file.</span><br><span class="line"># Redis is able to automatically rewrite the log file implicitly calling</span><br><span class="line"># BGREWRITEAOF when the AOF log size will growth by the specified percentage.</span><br><span class="line">#</span><br><span class="line"># This is how it works: Redis remembers the size of the AOF file after the</span><br><span class="line"># latest rewrite (or if no rewrite happened since the restart, the size of</span><br><span class="line"># the AOF at startup is used).</span><br><span class="line">#</span><br><span class="line"># This base size is compared to the current size. If the current size is</span><br><span class="line"># bigger than the specified percentage, the rewrite is triggered. Also</span><br><span class="line"># you need to specify a minimal size for the AOF file to be rewritten, this</span><br><span class="line"># is useful to avoid rewriting the AOF file even if the percentage increase</span><br><span class="line"># is reached but it is still pretty small.</span><br><span class="line">#</span><br><span class="line"># Specify a precentage of zero in order to disable the automatic AOF</span><br><span class="line"># rewrite feature.</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line">################################## SLOW LOG ###################################</span><br><span class="line"></span><br><span class="line"># The Redis Slow Log is a system to log queries that exceeded a specified</span><br><span class="line"># execution time. The execution time does not include the I/O operations</span><br><span class="line"># like talking with the client, sending the reply and so forth,</span><br><span class="line"># but just the time needed to actually execute the command (this is the only</span><br><span class="line"># stage of command execution where the thread is blocked and can not serve</span><br><span class="line"># other requests in the meantime).</span><br><span class="line">#</span><br><span class="line"># You can configure the slow log with two parameters: one tells Redis</span><br><span class="line"># what is the execution time, in microseconds, to exceed in order for the</span><br><span class="line"># command to get logged, and the other parameter is the length of the</span><br><span class="line"># slow log. When a new command is logged the oldest one is removed from the</span><br><span class="line"># queue of logged commands.</span><br><span class="line"></span><br><span class="line"># The following time is expressed in microseconds, so 1000000 is equivalent</span><br><span class="line"># to one second. Note that a negative number disables the slow log, while</span><br><span class="line"># a value of zero forces the logging of every command.</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"># There is no limit to this length. Just be aware that it will consume memory.</span><br><span class="line"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span><br><span class="line">slowlog-max-len 1024</span><br><span class="line"></span><br><span class="line">################################ VIRTUAL MEMORY ###############################</span><br><span class="line"></span><br><span class="line">### WARNING! Virtual Memory is deprecated in Redis 2.4</span><br><span class="line">### The use of Virtual Memory is strongly discouraged.</span><br><span class="line"></span><br><span class="line">### WARNING! Virtual Memory is deprecated in Redis 2.4</span><br><span class="line">### The use of Virtual Memory is strongly discouraged.</span><br><span class="line"></span><br><span class="line"># Virtual Memory allows Redis to work with datasets bigger than the actual</span><br><span class="line"># amount of RAM needed to hold the whole dataset in memory.</span><br><span class="line"># In order to do so very used keys are taken in memory while the other keys</span><br><span class="line"># are swapped into a swap file, similarly to what operating systems do</span><br><span class="line"># with memory pages.</span><br><span class="line"># 指定是否启用虚拟内存机制，默认值为no，</span><br><span class="line"># VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中</span><br><span class="line"># 把vm-enabled设置为yes，根据需要设置好接下来的三个VM参数，就可以启动VM了</span><br><span class="line"># vm-enabled no</span><br><span class="line"># vm-enabled yes</span><br><span class="line"></span><br><span class="line"># This is the path of the Redis swap file. As you can guess, swap files</span><br><span class="line"># can't be shared by different Redis instances, so make sure to use a swap</span><br><span class="line"># file for every redis process you are running. Redis will complain if the</span><br><span class="line"># swap file is already in use.</span><br><span class="line">#</span><br><span class="line"># Redis交换文件最好的存储是SSD（固态硬盘）</span><br><span class="line"># 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span><br><span class="line"># *** WARNING *** if you are using a shared hosting the default of putting</span><br><span class="line"># the swap file under /tmp is not secure. Create a dir with access granted</span><br><span class="line"># only to Redis user and configure Redis to create the swap file there.</span><br><span class="line"># vm-swap-file /tmp/redis.swap</span><br><span class="line"></span><br><span class="line"># With vm-max-memory 0 the system will swap everything it can. Not a good</span><br><span class="line"># default, just specify the max amount of RAM you can in bytes, but it's</span><br><span class="line"># better to leave some margin. For instance specify an amount of RAM</span><br><span class="line"># that's more or less between 60 and 80% of your free RAM.</span><br><span class="line"># 将所有大于vm-max-memory的数据存入虚拟内存，无论vm-max-memory设置多少，所有索引数据都是内存存储的（Redis的索引数据就是keys）</span><br><span class="line"># 也就是说当vm-max-memory设置为0的时候，其实是所有value都存在于磁盘。默认值为0</span><br><span class="line"># vm-max-memory 0</span><br><span class="line"></span><br><span class="line"># Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的数据大小来设定的。</span><br><span class="line"># 建议如果存储很多小对象，page大小最后设置为32或64bytes；如果存储很大的对象，则可以使用更大的page，如果不确定，就使用默认值</span><br><span class="line"># vm-page-size 32</span><br><span class="line"></span><br><span class="line"># 设置swap文件中的page数量由于页表（一种表示页面空闲或使用的bitmap）是存放在内存中的，在磁盘上每8个pages将消耗1byte的内存</span><br><span class="line"># swap空间总容量为 vm-page-size * vm-pages</span><br><span class="line">#</span><br><span class="line"># With the default of 32-bytes memory pages and 134217728 pages Redis will</span><br><span class="line"># use a 4 GB swap file, that will use 16 MB of RAM for the page table.</span><br><span class="line">#</span><br><span class="line"># It's better to use the smallest acceptable value for your application,</span><br><span class="line"># but the default is large in order to work in most conditions.</span><br><span class="line"># vm-pages 134217728</span><br><span class="line"></span><br><span class="line"># Max number of VM I/O threads running at the same time.</span><br><span class="line"># This threads are used to read/write data from/to swap file, since they</span><br><span class="line"># also encode and decode objects from disk to memory or the reverse, a bigger</span><br><span class="line"># number of threads can help with big objects even if they can't help with</span><br><span class="line"># I/O itself as the physical device may not be able to couple with many</span><br><span class="line"># reads/writes operations at the same time.</span><br><span class="line"># 设置访问swap文件的I/O线程数，最好不要超过机器的核数，如果设置为0，那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟，默认值为4</span><br><span class="line"># vm-max-threads 4</span><br><span class="line"></span><br><span class="line">############################### ADVANCED CONFIG ###############################</span><br><span class="line"></span><br><span class="line"># Hashes are encoded in a special way (much more memory efficient) when they</span><br><span class="line"># have at max a given numer of elements, and the biggest element does not</span><br><span class="line"># exceed a given threshold. You can configure this limits with the following</span><br><span class="line"># configuration directives.</span><br><span class="line"># 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span><br><span class="line"># hash-max-zipmap-entries 512</span><br><span class="line"># hash-max-zipmap-value 64</span><br><span class="line"></span><br><span class="line"># Similarly to hashes, small lists are also encoded in a special way in order</span><br><span class="line"># to save a lot of space. The special representation is only used when</span><br><span class="line"># you are under the following limits:</span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"># Sets have a special encoding in just one case: when a set is composed</span><br><span class="line"># of just strings that happens to be integers in radix 10 in the range</span><br><span class="line"># of 64 bit signed integers.</span><br><span class="line"># The following configuration setting sets the limit in the size of the</span><br><span class="line"># set in order to use this special memory saving encoding.</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"># Similarly to hashes and lists, sorted sets are also specially encoded in</span><br><span class="line"># order to save a lot of space. This encoding is only used when the length and</span><br><span class="line"># elements of a sorted set are below the following limits:</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span><br><span class="line"># order to help rehashing the main Redis hash table (the one mapping top-level</span><br><span class="line"># keys to values). The hash table implementation redis uses (see dict.c)</span><br><span class="line"># performs a lazy rehashing: the more operation you run into an hash table</span><br><span class="line"># that is rhashing, the more rehashing "steps" are performed, so if the</span><br><span class="line"># server is idle the rehashing is never complete and some more memory is used</span><br><span class="line"># by the hash table.</span><br><span class="line">#</span><br><span class="line"># The default is to use this millisecond 10 times every second in order to</span><br><span class="line"># active rehashing the main dictionaries, freeing memory when possible.</span><br><span class="line">#</span><br><span class="line"># If unsure:</span><br><span class="line"># use "activerehashing no" if you have hard latency requirements and it is</span><br><span class="line"># not a good thing in your environment that Redis can reply form time to time</span><br><span class="line"># to queries with 2 milliseconds delay.</span><br><span class="line"># 指定是否激活重置哈希，默认为开启</span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line">################################## INCLUDES ###################################</span><br><span class="line"></span><br><span class="line"># 指定包含其他的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各实例又拥有自己的特定配置文件</span><br><span class="line"># include /path/to/local.conf</span><br><span class="line"># include /path/to/other.conf</span><br></pre></td></tr></tbody></table></figure>





<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>service</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 规范</title>
    <url>/2020/01/16/java/java/</url>
    <content><![CDATA[<h1 id="Java-规范"><a href="#Java-规范" class="headerlink" title="Java 规范"></a>Java 规范</h1><h2 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h2><hr>
<p><strong>[强制]代码中的命名均不能以<code>下划线</code>或<code>美元符号</code>开始，也不能以<code>下划线</code>或<code>美元符号</code>结束</strong></p>
<p>反例： _name / name / $Object / name_  / name$ / Object</p>
<p><strong>[推荐]  代码中的命名严禁使用<code>拼音</code>与<code>英文</code>混合的方式，更不允许直接使用<code>中文</code>的方式。</strong></p>
<p>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</p>
<p>正例： luculent / taobao / youku / hangzhou 等国际通用的名称，可视同英文。</p>
<p>反例： DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</p>
<p><strong>[强制] 类名使用 <code>UpperCamelCase</code> 风格，必须遵从<a href="https://baike.baidu.com/item/%E9%AA%86%E9%A9%BC%E5%91%BD%E5%90%8D%E6%B3%95/7794053?fr=aladdin&amp;fromid=7560610&amp;fromtitle=%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95">驼峰</a>形式，但以下情形例外：<code>DO</code> / <code>BO</code> /<code>DTO</code> / <code>VO</code> / <code>AO</code></strong></p>
<p>正例：MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</p>
<p>反例：macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</p>
<p><strong>[强制] 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从<code>驼峰</code>形式。</strong></p>
<p>正例： localValue / getHttpMessage() / inputUserId</p>
<p><strong>[强制] 常量命名全部<code>大写</code>，单词间用<code>下划线</code>隔开，力求语义表达完整清楚，不要嫌名字长。</strong></p>
<p>正例： MAX_STOCK_COUNT</p>
<p>反例： MAX_COUNT</p>
<p><strong>[强制] 抽象类命名使用 <code>Abstract</code> 或 <code>Base</code> 开头；异常类命名使用 <code>Exception</code> 结尾；测试类命名以它要测试的类的名称开始，以 <code>Test</code> 结尾。</strong></p>
<p><strong>[强制] 中括号是数组类型的一部分，数组定义如下：</strong></p>
<p>正例：String[] args;</p>
<p>反例：使用 String args[]的方式来定义。</p>
<p><strong>[强制] <code>POJO</code> 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。</strong></p>
<p>反例：定义为基本数据类型 Boolean isDeleted；的属性，它的方法也是 isDeleted()，RPC框架在反向解析的时候，“以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异<br>常。</p>
<p><strong>[强制] <code>包名</code>统一使用<code>小写</code>，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</strong></p>
<p>正例： 应用工具类包名为 com.alibaba.open.util、类名为 MessageUtils（此规则参考spring 的框架结构）</p>
<p><strong>[推荐] 避免使用不规范的缩写，望文不知义。</strong></p>
<p>反例： AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类<br>随意缩写严重降低了代码的可阅读性。</p>
<p><strong>[推荐] 如果使用到了<code>设计模式</code>，建议在类名中体现出具体模式。</strong><br>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。</p>
<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFactory</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginProxy</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceObserver</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[推荐] 接口类中的方法和属性<code>不要加任何修饰符号</code>（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</strong></p>
<p>正例：接口方法签名：void f();<br> 接口基础常量表示：String COMPANY = “alibaba”;</p>
<p>反例：接口方法定义：public abstract void f();</p>
<p>说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p>
<p>12.接口和实现类的命名有两套规则：</p>
<ul>
<li><strong>[强制] 对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。</strong></li>
</ul>
<p>正例：CacheServiceImpl 实现 CacheService 接口。</p>
<ul>
<li><strong>[推荐] 如果是形容能力的接口名称，取对应的形容词做接口名（通常是–able 的形式）。</strong></li>
</ul>
<p>正例：AbstractTranslator 实现 Translatable。</p>
<ul>
<li><strong>[参考] 枚举类名建议带上 <code>Enum</code> 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</strong></li>
</ul>
<p>说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</p>
<p>正例：枚举名字：DealStatusEnum，成员名称：SUCCESS / UNKOWN_REASON。</p>
<p><strong>[参考] 各层命名规约：</strong></p>
<p>A) <strong><code>Service</code>/<code>DAO</code> 层方法命名规约</strong></p>
<ul>
<li>获取单个对象的方法用 get 做前缀。</li>
<li>获取多个对象的方法用 list 做前缀。</li>
<li>获取统计值的方法用 count 做前缀。</li>
<li>插入的方法用 save（推荐）或 insert 做前缀。</li>
<li>删除的方法用 remove（推荐）或 delete 做前缀。</li>
<li>修改的方法用 update 做前缀。</li>
</ul>
<p>B) <strong>领域模型命名规约</strong></p>
<ul>
<li>数据对象：xxxDO，xxx 即为数据表名。</li>
<li>数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</li>
<li>展示对象：xxxVO，xxx 一般为网页名称。</li>
<li>POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</li>
</ul>
<h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><hr>
<p><strong>[强制] 避免不必要的资源浪费</strong></p>
<p>反例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">PageData pd = <span class="keyword">new</span> PageData();</span><br><span class="line">pd = <span class="keyword">this</span>.getPageData();</span><br></pre></td></tr></tbody></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">PageData pd = <span class="keyword">this</span>.getPageData();</span><br></pre></td></tr></tbody></table></figure>


<p><strong>[强制] 不允许任何魔法值（即未经定义的常量）直接出现在代码中。</strong></p>
<p>反例： </p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String key = <span class="string">"Id#taobao_"</span> + tradeId;</span><br><span class="line"> cache.put(key, value);</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[强制] <code>long</code> 或者 <code>Long</code> 初始赋值时，必须使用大写的 <code>L</code>，不能是小写的 <code>l</code>，小写容易跟数字<code>1</code> 混淆，造成误解。</strong><br>说明：Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</p>
<p><strong>[推荐] 不要使用一个常量类维护所有常量，应该按常量功能进行归类，分开维护。</strong><br>如：缓存相关的常量放在类：CacheConsts 下；系统配置相关的常量放在类：ConfigConsts 下。</p>
<p>说明：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。</p>
<p><strong>[推荐] 常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。</strong></p>
<ul>
<li><p>跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。</p>
</li>
<li><p>应用内共享常量：放置在一方库的 modules 中的 constant 目录下。</p>
</li>
</ul>
<p>反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：</p>
<p>类 A 中：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YES = <span class="string">"yes"</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>类 B 中：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YES = <span class="string">"y"</span>; A.YES.equals(B.YES)，</span><br></pre></td></tr></tbody></table></figure>

<p>预期是 true，但实际返回为 false，导致线上问题。</p>
<ul>
<li><p>子工程内部共享常量：即在当前子工程的 constant 目录下。</p>
</li>
<li><p>包内共享常量：即在当前包下单独的 constant 目录下。</p>
</li>
<li><p>类内共享常量：直接在类内部 private static final 定义。</p>
</li>
</ul>
<p><strong>[推荐] 如果变量值仅在一个范围内变化，且带有名称之外的延伸属性，定义为枚举类。下面正例中的数字就是延伸信息，表示星期几。</strong></p>
<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Enum { MONDAY(<span class="number">1</span>), TUESDAY(<span class="number">2</span>), WEDNESDAY(<span class="number">3</span>), THURSDAY(<span class="number">4</span>), FRIDAY(<span class="number">5</span>), SATURDAY(<span class="number">6</span>),</span><br><span class="line">SUNDAY(<span class="number">7</span>);}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><p><a href="ftp://172.168.1.158/%E6%96%87%E6%A1%A3/%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83/codeformatter.xml">使用模版</a></p>
<hr>
<p><strong>[强制] 多个变量<code>多行声明</code>，禁止一行上声明多个变量，这样很难阅读。</strong></p>
<p>反例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String account = <span class="string">""</span>, password = <span class="string">""</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String account = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">String password = <span class="string">""</span>;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[强制] 大括号的使用约定。如果是大括号内为空，则简洁地写成<code>{}</code>即可，不需要换行；如果是非空代码块则：</strong></p>
<ol>
<li>左大括号前不换行。</li>
<li>左大括号后换行。</li>
<li>右大括号前换行。</li>
<li>右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。</li>
</ol>
<p><strong>[强制]  左小括号和字符之间不出现<code>空格</code>；同样，右小括号和字符之间也不出现<code>空格</code>。详见第 5 条下方正例提示。</strong></p>
<p>反例：if (空格 a == b 空格)</p>
<p><strong>[强制] <code>if</code>/<code>for</code>/<code>while</code>/<code>switch</code>/<code>do</code> 等保留字与括号之间都必须加空格。</strong></p>
<p><strong>[强制] 任何二目、三目运算符的左右两边都需要加一个<code>空格</code>。</strong><br>说明：运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</p>
<p><strong>[强制] 缩进采用 <code>4</code> 个空格，禁止使用 <code>tab</code> 字符。</strong></p>
<p>说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">// 缩进 4 个空格</span></span><br><span class="line">    String say = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="comment">// 运算符的左右必须有一个空格</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格</span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) {</span><br><span class="line">      System.out.println(say);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 左大括号前加空格且不换行；左大括号后换行</span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) {</span><br><span class="line">      System.out.println(<span class="string">"world"</span>);</span><br><span class="line">    <span class="comment">// 右大括号前换行，右大括号后有 else，不用换行</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      System.out.println(<span class="string">"ok"</span>); </span><br><span class="line">    <span class="comment">// 在右大括号后直接结束，则必须换行</span></span><br><span class="line">   }</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure>

<p><strong>[强制] 单行字符数限制不超过 <code>120</code> 个，超出需要<code>换行</code>，换行时遵循如下原则：</strong></p>
<ol>
<li>第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</li>
<li>运算符与下文一起换行。</li>
<li>方法调用的点符号与下文一起换行。</li>
<li>在多个参数超长，在逗号后换行。</li>
<li>在括号前不要换行，见反例。</li>
</ol>
<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"><span class="comment">//超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行</span></span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...</span><br><span class="line"></span><br><span class="line">.append(<span class="string">"huang"</span>)...</span><br><span class="line"></span><br><span class="line">.append(<span class="string">"huang"</span>)...</span><br><span class="line"></span><br><span class="line">.append(<span class="string">"huang"</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>反例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"><span class="comment">//超过 120 个字符的情况下，不要在括号前换行</span></span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...append(<span class="string">"huang"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数很多的方法调用可能超过 120 个字符，不要在逗号前换行</span></span><br><span class="line"></span><br><span class="line">method(args1, args2, args3, ..., argsX);</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[强制] 方法参数在定义和传入时，多个参数逗号后边必须加<code>空格</code>。</strong></p>
<p>正例：下例中实参的”a”,后边必须要有一个空格。method(“a”, “b”, “c”);</p>
<p><strong>[强制] IDE 的 text file encoding 设置为 <code>UTF-8</code>; IDE 中文件的换行符使用 <code>Unix</code> 格式，不要使用 <code>windows</code> 格式。</strong></p>
<p><strong>[推荐] 没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。</strong></p>
<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> b = <span class="number">4L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> c = <span class="number">5F</span>;</span><br><span class="line"></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br></pre></td></tr></tbody></table></figure>

<p>说明：增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的情况下，是一种累赘的事情。</p>
<p><strong>[推荐] 方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。</strong></p>
<p>说明：没有必要插入多个空行进行隔开。</p>
<h2 id="注释规约"><a href="#注释规约" class="headerlink" title="注释规约"></a>注释规约</h2><p><a href="ftp://172.168.1.158/%E6%96%87%E6%A1%A3/%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/codetemplates.xml">使用模版</a></p>
<hr>
<p><em><em>[强制] 类、类属性、类方法的注释必须使用 <code>Javadoc</code> 规范，使用/**内容</em>/格式，不得使用//xxx 方式。</em>*</p>
<p>说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p>
<p><strong>[强制] 所有的抽象方法（包括接口中的方法）必须要用 <code>Javadoc</code> 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</strong></p>
<p>说明：对子类的实现要求，或者调用注意事项，请一并说明。</p>
<p><strong>[强制] 所有的类都必须添加<code>创建者</code>和<code>创建日期</code>。</strong></p>
<p><strong>[强制] 方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐。</strong></p>
<p><strong>[强制] 所有的枚举类型字段必须要有注释，说明每个数据项的用途。</strong></p>
<p><strong>[推荐] 与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</strong></p>
<p>反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p>
<p><strong>[推荐] 代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</strong></p>
<p>说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，<br>就失去了导航的意义。</p>
<p><strong>[参考] 合理处理注释掉的代码。在上方详细说明，而不是简单的注释掉。如果无用，则删除。</strong></p>
<p>说明：代码被注释掉有两种可能性：</p>
<ul>
<li>后续会恢复此段代码逻辑。</li>
</ul>
<ul>
<li>永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。</li>
</ul>
<p><strong>[参考] 对于注释的要求：</strong></p>
<ol>
<li>能够准确反应设计思想和代码逻辑；</li>
<li>能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。</li>
</ol>
<p>完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</p>
<p><strong>[参考] 好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。</strong></p>
<p>反例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// put elephant into fridge</span></span><br><span class="line">put(elephant, fridge);</span><br></pre></td></tr></tbody></table></figure>

<p>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p>
<p><strong>[参考] 特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</strong></p>
<ul>
<li>待办事宜（TODO）:（ 标记人，标记时间，[预计处理时间]）<br>表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc<br>还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。</li>
</ul>
<ul>
<li>错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）<br>在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</li>
</ul>
<h2 id="OOP规约"><a href="#OOP规约" class="headerlink" title="OOP规约"></a>OOP规约</h2><hr>
<p><strong>[强制] 避免通过一个类的对象引用访问此类的<code>静态变量</code>或<code>静态方法</code>，无谓增加编译器解析成本，直接用<code>类名</code>来访问即可。</strong></p>
<p><strong>[强制] 所有的覆写方法，必须加<code>@Override</code> 注解。</strong></p>
<p>说明：getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</p>
<p><strong>[强制] 相同参数类型，相同业务含义，才可以使用 Java 的<code>可变参数</code>，避免使用 <code>Object</code>。</strong></p>
<p>说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）</p>
<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUsers</span><span class="params">(String type, Integer... ids)</span> </span>{...}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[强制] 外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加<code>@Deprecated</code> 注解，并清晰地说明采用的新接口或者新服务是什么。</strong></p>
<p><strong>[强制] 不能使用过时的类或方法。</strong></p>
<p>说明：java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</p>
<p><strong>[强制] Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。</strong></p>
<p>正例:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"test"</span>.equals(object);</span><br></pre></td></tr></tbody></table></figure>

<p>反例： </p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">object.equals(<span class="string">"test"</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>说明：推荐使用 java.util.Objects#equals （JDK7 引入的工具类）</p>
<p><strong>[强制] 所有的相同类型的包装类对象之间值的比较，全部使用 <code>equals</code> 方法比较。</strong></p>
<p>说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</p>
<p>关于基本数据类型与包装数据类型的使用标准如下：</p>
<ol>
<li><strong>[强制] 所有的 POJO 类属性必须使用包装数据类型。</strong></li>
<li><strong>[强制] RPC 方法的返回值和参数必须使用包装数据类型。</strong></li>
<li><strong>[推荐] 所有的局部变量使用基本数据类型。</strong></li>
</ol>
<p>说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何<a href="http://www.importnew.com/14229.html">NPE</a> 问题，或者入库检查，都由使用者来保证。</p>
<p>正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p>
<p>反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示：0%，这是不合理的，应该显示成中划线-。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</p>
<p><strong>[强制] 定义 <code>DO</code>/<code>DTO</code>/<code>VO</code> 等 <code>POJO</code> 类时，不要设定任何属性默认值。</strong></p>
<p>反例：POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>
<p><strong>[强制] <code>序列化</code>类新增属性时，请不要修改 <code>serialVersionUID</code> 字段，避免<a href="https://www.ibm.com/developerworks/cn/java/j-5things1/index.html">反序列</a>失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</strong></p>
<p>说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。</p>
<p><strong>[强制] 构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 <code>init</code> 方法中。</strong></p>
<p><strong>[推荐] POJO 类必须写 <code>toString</code> 方法。</strong></p>
<p>使用 IDE 的中工具：source generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</p>
<p>说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</p>
<p><strong>[推荐] 使用索引访问用 <code>String</code> 的 <code>split</code> 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 <code>IndexOutOfBoundsException</code> 的风险。</strong></p>
<p>说明：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String str = <span class="string">"a,b,c,,"</span>;</span><br><span class="line">String[] ary = str.split(<span class="string">","</span>);</span><br><span class="line"><span class="comment">//预期大于 3，结果是 3</span></span><br><span class="line">System.out.println(ary.length);</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[推荐] 当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。</strong></p>
<p><strong>[推荐]  类内方法定义顺序依次是：<code>公有方法或保护方法</code> &gt; <code>私有方法</code> &gt; <code>getter/setter</code>方法。</strong></p>
<p>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为方法信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。</p>
<p><strong>[推荐] setter 方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。</strong></p>
<p>反例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getData</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">true</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.data + <span class="number">100</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.data - <span class="number">100</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[推荐] 循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</strong></p>
<p>说明：反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</p>
<p>反例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String str = <span class="string">"start"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">str = str + <span class="string">"hello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[推荐] <code>final</code> 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</strong></p>
<ul>
<li>不允许被继承的类，如：String 类。</li>
<li>不允许修改引用的域对象，如：POJO 类的域变量。</li>
<li>不允许被重写的方法，如：POJO 类的 setter 方法。</li>
<li>不允许运行过程中重新赋值的局部变量。</li>
<li>避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好    地进行重构。</li>
</ul>
<p><strong>[推荐] 慎用 Object 的 <code>clone</code> 方法来拷贝对象。</strong></p>
<p>说明：对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</p>
<p><strong>[推荐] 类成员与方法访问控制从严：</strong></p>
<ul>
<li><p>如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</p>
</li>
<li><p>工具类不允许有 public 或 default 构造方法。</p>
</li>
<li><p>类非 static 成员变量并且与子类共享，必须是 protected。</p>
</li>
<li><p>类非 static 成员变量并且仅在本类使用，必须是 private。</p>
</li>
<li><p>类 static 成员变量如果仅在本类使用，必须是 private。</p>
</li>
<li><p>若是 static 成员变量，必须考虑是否为 final。</p>
</li>
<li><p>类成员方法只供类内部调用，必须是 private。</p>
</li>
<li><p>类成员方法只对继承类公开，那么限制为 protected。</p>
</li>
</ul>
<p>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</p>
<p>?&gt; 思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 方法，或者一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。</p>
<h2 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h2><hr>
<p><strong>[强制] 关于 <code>hashCode</code> 和 <code>equals</code> 的处理，遵循如下规则：</strong></p>
<ul>
<li><p>只要重写 equals，就必须重写 hashCode。</p>
</li>
<li><p>因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法。</p>
</li>
<li><p>如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals。</p>
</li>
</ul>
<p>说明：String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象<br>作为 key 来使用。</p>
<p><strong>[强制] <code>ArrayList</code>的<code>subList</code>结果不可强转成<code>ArrayList</code>，否则会抛出<code>ClassCastException</code></strong></p>
<p>异常：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">java.util.RandomAccessSubList cannot be cast to java.util.ArrayList ;</span><br></pre></td></tr></tbody></table></figure>

<p>说明：subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList ，而是ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。</p>
<p><strong>[强制]  在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生 <code>ConcurrentModificationException</code> 异常。</strong></p>
<p><strong>[强制] 使用集合转数组的方法，必须使用集合的 <code>toArray(T[] array)</code>，传入的是类型完全一样的数组，大小就是 list.size()。</strong></p>
<p>说明：使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。</p>
<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="string">"guan"</span>);</span><br><span class="line">list.add(<span class="string">"bao"</span>);</span><br><span class="line">String[] array = <span class="keyword">new</span> String[list.size()];</span><br><span class="line">array = list.toArray(array);</span><br></pre></td></tr></tbody></table></figure>

<p>反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p>
<p><strong>[强制] 使用工具类 <code>Arrays.asList()</code>把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</strong></p>
<p>说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList<br>体现的是适配器模式，只是转换接口，后台的数据仍是数组。<br> String[] str = new String[] { “a”, “b” };<br> List list = Arrays.asList(str);<br>第一种情况：list.add(“c”); 运行时异常。<br>第二种情况：str[0] = “gujin”; 那么 list.get(0)也会随之修改。</p>
<p><strong>[强制] 泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法，而&lt;? super T&gt;不能使用 get 方法，做为接口调用赋值时易出错。</strong></p>
<p>说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：</p>
<ol>
<li>频繁往外读取内容的，适合用上界 Extends。</li>
<li>经常往里插入的，适合用下界 Super。</li>
</ol>
<p><strong>[强制] 不要在 <code>foreach</code> 循环里进行元素的 remove/add 操作。remove 元素请使用 <code>Iterator</code>方式，如果并发操作，需要对 Iterator 对象加锁。</strong></p>
<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = a.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">String temp = it.next();</span><br><span class="line"><span class="keyword">if</span> (删除元素的条件) {</span><br><span class="line">it.remove();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>反例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;String&gt; a = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">a.add(<span class="string">"1"</span>);</span><br><span class="line">a.add(<span class="string">"2"</span>);</span><br><span class="line"><span class="keyword">for</span> (String temp : a) {</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"1"</span>.equals(temp)) {</span><br><span class="line">a.remove(temp);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>?&gt; 说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p>
<p><strong>[强制]  在 JDK7 版本及以上，<code>Comparator</code> 要满足如下三个条件，不然 <code>Arrays.sort</code>，<code>Collections.sort</code> 会报 <code>IllegalArgumentException</code> 异常。</strong></p>
<p>说明：</p>
<ol>
<li>x，y 的比较结果和 y，x 的比较结果相反。</li>
<li>x&gt;y，y&gt;z，则 x&gt;z。</li>
<li>x=y，则 x，z 比较结果和 y，z 比较结果相同。</li>
</ol>
<p>反例：下例中没有处理相等的情况，实际使用中可能会出现异常：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Comparator&lt;Student&gt;() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> o1.getId() &gt; o2.getId() ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[推荐] 集合初始化时，指定集合初始值大小。</strong></p>
<p>说明：HashMap 使用 HashMap(int initialCapacity) 初始化，</p>
<p>正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 loader<br>factor）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16。</p>
<p>反例：HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容<br>量 7 次被迫扩大，resize 需要重建 hash 表，严重影响性能。</p>
<p><strong>[推荐] 使用 <code>entrySet</code> 遍历 Map 类集合 KV，而不是 <code>keySet</code> 方式进行遍历。</strong></p>
<p>说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。</p>
<p>正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。</p>
<p><strong>[推荐] 高度注意 <code>Map</code> 类集合 <code>K/V</code> 能不能存储 <code>null</code> 值的情况，如下表格：</strong></p>
<table>
<thead>
<tr>
<th>集合类</th>
<th>key</th>
<th>Value</th>
<th>Super</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Hashtable</td>
<td>不允许为 null</td>
<td>不允许为 null</td>
<td>Dictionary</td>
<td>线程安全</td>
</tr>
<tr>
<td>ConcurrentHashMap</td>
<td>不允许为 null</td>
<td>不允许为 null</td>
<td>AbstractMap</td>
<td>分段锁技术</td>
</tr>
<tr>
<td>TreeMap</td>
<td>不允许为 null</td>
<td>允许为 null</td>
<td>AbstractMap</td>
<td>线程不安全</td>
</tr>
<tr>
<td>HashMap</td>
<td>允许为 null</td>
<td>允许为 null</td>
<td>AbstractMap</td>
<td>线程不安全</td>
</tr>
</tbody></table>
<p>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，<br>存储 null 值时会抛出 NPE 异常。</p>
<p><strong>[参考] 合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。</strong></p>
<p>说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是<br>order/sort。</p>
<p><strong>[参考] 利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作。</strong></p>
<h2 id="并发处理"><a href="#并发处理" class="headerlink" title="并发处理"></a>并发处理</h2><hr>
<p><strong>[强制] 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</strong></p>
<p>说明：资源驱动类、工具类、单例工厂类都需要注意。</p>
<p><strong>[强制] 创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</strong></p>
<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTaskThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimerTaskThread</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">super</span>.setName(<span class="string">"TimerTaskThread"</span>); ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[强制] 线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</strong></p>
<p>说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p>
<p><strong>[强制] 线程池不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code> 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</strong></p>
<p>说明：Executors 返回的线程池对象的弊端如下：</p>
<ol>
<li>FixedThreadPool 和 SingleThreadPool:<br>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</li>
<li>CachedThreadPool 和 ScheduledThreadPool:<br>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</li>
</ol>
<p><strong>[强制] <code>SimpleDateFormat</code> 是线程不安全的类，一般不要定义为 <code>static</code> 变量，如果定义为static，必须<code>加锁</code>，或者使用 DateUtils 工具类。</strong></p>
<p>正例：注意线程安全，使用 DateUtils。亦推荐如下处理：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<p>说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter代替Simpledateformatter，官方给出的解释：simple beautiful strong<br>immutable thread-safe。</p>
<p><strong>[强制] 高并发时，同步调用应该去考量<a href="https://www.ibm.com/developerworks/cn/java/j-lo-lock/index.html">锁</a>的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</strong></p>
<p>说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p>
<p><strong>[强制] 对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。</strong></p>
<p>说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。</p>
<p><strong>[强制] 并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用<code>乐观锁</code>，使用 version 作为更新依据。</strong></p>
<p>说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</p>
<p><strong>[强制] 多线程并行处理定时任务时，<code>Timer</code> 运行多个 <code>TimeTask</code> 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 <code>ScheduledExecutorService</code> 则没有这个问题。</strong></p>
<p><strong>[推荐] 使用 <code>CountDownLatch</code> 进行异步转同步操作，每个线程退出前必须调用 <code>countDown</code>方法，线程执行代码注意 <code>catch</code> 异常，确保 <code>countDown</code> 方法可以执行，避免主线程无法执行至 <code>await</code> 方法，直到超时才返回结果。</strong></p>
<p>说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</p>
<p><strong>[推荐] 避免 <code>Random</code> 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一<code>seed</code> 导致的性能下降。</strong></p>
<p>说明：Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。</p>
<p>正例：在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保证每个线程持有一个实例。</p>
<p><strong>[推荐] 在并发场景下，通过<a href="http://ifeve.com/double-checked-locking-with-delay-initialization/">双重检查锁</a>（double-checked locking）实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)，推荐问题解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型。</strong></p>
<p>反例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>{</span><br><span class="line"><span class="keyword">private</span> Helper helper = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (helper == <span class="keyword">null</span>) <span class="keyword">synchronized</span>(<span class="keyword">this</span>) {</span><br><span class="line"><span class="keyword">if</span> (helper == <span class="keyword">null</span>)</span><br><span class="line">helper = <span class="keyword">new</span> Helper();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> helper;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// other functions and members...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[参考] <code>volatile</code> 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 <code>count++</code>操作，使用如下类实现：</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">AtomicInteger count = <span class="keyword">new</span> AtomicInteger(); </span><br><span class="line">count.addAndGet(<span class="number">1</span>); </span><br></pre></td></tr></tbody></table></figure>

<p>如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。</p>
<p><strong>[参考]  <code>HashMap</code> 在容量不够进行 <code>resize</code> 时由于高并发可能出现死链，导致 <code>CPU</code> 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。</strong></p>
<p><strong>[参考] <code>ThreadLocal</code> 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 <code>static</code>修饰。这个变量是针对一个线程内所有操作共有的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</strong></p>
<h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><hr>
<p><strong>[强制] 在一个 <code>switch</code> 块内，每个 <code>case</code> 要么通过 <code>break</code>/<code>return</code> 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 <code>default</code> 语句并且放在最后，即使它什么代码也没有。</strong></p>
<p><strong>[强制] 在 <code>if</code>/<code>else</code>/<code>for</code>/<code>while</code>/<code>do</code> 语句中必须使用大括号。即使只有一行代码，避免使用单行的形式：if (condition) statements;</strong></p>
<p><strong>[推荐] 表达异常的分支时，少用 <code>if-else</code> 方式，这种方式可以改写成：</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) {</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">return</span> obj;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 接着写 else 的业务逻辑代码;</span></span><br></pre></td></tr></tbody></table></figure>

<p>说明：如果非得使用 if()…else if()…else…方式表达逻辑</p>
<p><strong>[强制] 避免后续代码维护困难，请勿超过 3 层。正例：逻辑上超过 3 层的 if-else 代码可以使用卫语句，或者状态模式来实现。</strong></p>
<p>示例:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">today</span><span class="params">()</span> </span>{</span><br><span class="line"> <span class="keyword">if</span> (isBusy()) {</span><br><span class="line">System.out.println(“change time.”);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> }</span><br><span class="line"> <span class="keyword">if</span> (isFree()) {</span><br><span class="line">System.out.println(“go to travel.”);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> }</span><br><span class="line">System.out.println(“stay at home to learn Alibaba Java Coding Guideline.”);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[推荐] 除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</strong></p>
<p>说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</p>
<p>正例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码如下</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> existed = (file.open(fileName, <span class="string">"w"</span>) != <span class="keyword">null</span>) &amp;&amp; (...) || (...);</span><br><span class="line"><span class="keyword">if</span> (existed) {</span><br><span class="line"> ...</span><br><span class="line">}</span><br><span class="line">反例：</span><br><span class="line"><span class="keyword">if</span> ((file.open(fileName, <span class="string">"w"</span>) != <span class="keyword">null</span>) &amp;&amp; (...) || (...)) {</span><br><span class="line"> ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>[推荐] 循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 <code>try-catch</code> 操作（这个 try-catch 是否可以移至循环体外）。</strong></p>
<p><strong>[推荐] 接口入参保护，这种场景常见的是用于做批量操作的接口。</strong></p>
<p><strong>[参考] 下列情形，需要进行参数校验：</strong></p>
<ul>
<li><p>调用频次低的方法。</p>
</li>
<li><p>执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</p>
</li>
<li><p>需要极高稳定性和可用性的方法。</p>
</li>
<li><p>对外提供的开放接口，不管是 RPC/API/HTTP 接口。</p>
</li>
<li><p>敏感权限入口。</p>
</li>
</ul>
<p><strong>[参考] 下列情形，不需要进行参数校验：</strong></p>
<ul>
<li><p>极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。</p>
</li>
<li><p>底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所    以 DAO 的参数校验，可以省略。</p>
</li>
<li><p>被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>编码规范</category>
      </categories>
      <tags>
        <tag>编码规范</tag>
        <tag>java</tag>
      </tags>
  </entry>
</search>
